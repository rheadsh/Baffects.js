{
    "project": {
        "name": "baffects.js",
        "description": "baffects.js API documentation",
        "version": "0.1",
        "url": ""
    },
    "files": {
        "src\\after-effects-color.js": {
            "name": "src\\after-effects-color.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\after-effects-constants.js": {
            "name": "src\\after-effects-constants.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\after-effects-data.js": {
            "name": "src\\after-effects-data.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\after-effects-environment.js": {
            "name": "src\\after-effects-environment.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\after-effects-keyframes.js": {
            "name": "src\\after-effects-keyframes.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\after-effects-lightsandcam.js": {
            "name": "src\\after-effects-lightsandcam.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\after-effects-masks.js": {
            "name": "src\\after-effects-masks.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\after-effects-shapes.js": {
            "name": "src\\after-effects-shapes.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\after-effects-text.js": {
            "name": "src\\after-effects-text.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\after-effects-transformation.js": {
            "name": "src\\after-effects-transformation.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\core.js": {
            "name": "src\\core.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\data.js": {
            "name": "src\\data.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\environment.js": {
            "name": "src\\environment.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\global-functions.js": {
            "name": "src\\global-functions.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\math.js": {
            "name": "src\\math.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\math_random_noise.js": {
            "name": "src\\math_random_noise.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src\\public-vars.js": {
            "name": "src\\public-vars.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "baffects.js": {
            "name": "baffects.js",
            "modules": {},
            "classes": {
                "b": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "b": {
            "name": "b",
            "shortname": "b",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "baffects.js",
            "line": 63,
            "static": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src\\after-effects-color.js",
            "line": 3,
            "description": "Creates new RGBA color",
            "cat": "AfterEffects",
            "subcat": "Color",
            "itemtype": "method",
            "name": "color",
            "params": [
                {
                    "name": "red",
                    "description": "Range[0,1] Red value",
                    "type": "Number"
                },
                {
                    "name": "green",
                    "description": "Range[0,1] Green value",
                    "type": "Number"
                },
                {
                    "name": "blue",
                    "description": "Range[0,1] Blue value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "Range[0,1] Opacity value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "RGBA color",
                "type": "Color"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-color.js",
            "line": 58,
            "description": "Sets the color used to fill shapes, you can also send an array of the form [r, g, b, a].",
            "cat": "AfterEffects",
            "subcat": "Color",
            "itemtype": "method",
            "name": "fill",
            "params": [
                {
                    "name": "red",
                    "description": "Range[0,1] Red value",
                    "type": "Number"
                },
                {
                    "name": "green",
                    "description": "Range[0,1] Green value",
                    "type": "Number"
                },
                {
                    "name": "blue",
                    "description": "Range[0,1] Blue value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "Range[0,1] Opacity value",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-color.js",
            "line": 98,
            "description": "Sets the color used to draw lines and borders around shapes, you can also send an array of the form [r, g, b, a].",
            "cat": "AfterEffects",
            "subcat": "Color",
            "itemtype": "method",
            "name": "stroke",
            "params": [
                {
                    "name": "red",
                    "description": "Range[0,1] Red value",
                    "type": "Number"
                },
                {
                    "name": "green",
                    "description": "Range[0,1] Green value",
                    "type": "Number"
                },
                {
                    "name": "blue",
                    "description": "Range[0,1] Blue value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "Range[0,1] Opacity value",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-color.js",
            "line": 136,
            "description": "Converts from HSBA color mode to RGBA",
            "cat": "AfterEffects",
            "subcat": "Color",
            "itemtype": "method",
            "name": "hsbaToRgba",
            "params": [
                {
                    "name": "hue",
                    "description": "Range[0,1] Hue value",
                    "type": "Number"
                },
                {
                    "name": "saturation",
                    "description": "Range[0,1] Saturation value",
                    "type": "Number"
                },
                {
                    "name": "brightness",
                    "description": "Range[0,1] Brightness value",
                    "type": "Number"
                },
                {
                    "name": "alpha",
                    "description": "Range[0,1] Alpha value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Converted color",
                "type": "Color"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 1,
            "description": "Used with b.colorMode() to set the color space.",
            "itemtype": "property",
            "name": "RGB",
            "type": "String",
            "cat": "Color",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 8,
            "description": "Two Pi.",
            "itemtype": "property",
            "name": "TWO_PI",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 16,
            "description": "Pi.",
            "itemtype": "property",
            "name": "PI",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 24,
            "description": "Half Pi.",
            "itemtype": "property",
            "name": "HALF_PI",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 32,
            "description": "Quarter Pi.",
            "itemtype": "property",
            "name": "QUARTER_PI",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 40,
            "description": "Sin Cos Length.",
            "itemtype": "property",
            "name": "SINCOS_LENGTH",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 48,
            "description": "Epsilon.",
            "itemtype": "property",
            "name": "EPSILON",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 56,
            "description": "Kappa.",
            "itemtype": "property",
            "name": "KAPPA",
            "type": "Number",
            "cat": "Math",
            "subcat": "Constants",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 70,
            "description": "Left text alignment.",
            "itemtype": "property",
            "name": "J_LEFT",
            "type": "Text Justification Mode",
            "cat": "AfterEffects",
            "subcat": "Text",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 78,
            "description": "Right text alignment.",
            "itemtype": "property",
            "name": "J_RIGHT",
            "type": "Text Justification Mode",
            "cat": "AfterEffects",
            "subcat": "Text",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 86,
            "description": "Center text alignment.",
            "itemtype": "property",
            "name": "J_CENTER",
            "type": "Text Justification Mode",
            "cat": "AfterEffects",
            "subcat": "Text",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 94,
            "description": "Full left text alignment.",
            "itemtype": "property",
            "name": "J_FULL_LEFT",
            "type": "Text Justification Mode",
            "cat": "AfterEffects",
            "subcat": "Text",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 102,
            "description": "Full right text alignment",
            "itemtype": "property",
            "name": "J_FULL_RIGHT",
            "type": "Text Justification Mode",
            "cat": "AfterEffects",
            "subcat": "Text",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 110,
            "description": "Full center text alignment",
            "itemtype": "property",
            "name": "J_FULL_CENTER",
            "type": "Text Justification Mode",
            "cat": "AfterEffects",
            "subcat": "Text",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 118,
            "description": "Full text alignment",
            "itemtype": "property",
            "name": "J_FULL",
            "type": "Text Justification Mode",
            "cat": "AfterEffects",
            "subcat": "Text",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 131,
            "description": "Bezier keyframe interpolation.",
            "itemtype": "property",
            "name": "BEZIER",
            "type": "Keyframe Interpolation Mode",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 139,
            "description": "Linear keyframe interpolation.",
            "itemtype": "property",
            "name": "LINEAR",
            "type": "Keyframe Interpolation Mode",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 147,
            "description": "Hold keyframe interpolation.",
            "itemtype": "property",
            "name": "HOLD",
            "type": "Keyframe Interpolation Mode",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 156,
            "description": "Auto bezier for keyframe spatial interpolation.",
            "itemtype": "property",
            "name": "HOLD",
            "type": "Keyframe Interpolation Mode",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 169,
            "description": "Enable 3D mode in layer.",
            "itemtype": "property",
            "name": "ENABLE",
            "type": "3DMode",
            "cat": "AfterEffects",
            "subcat": "3D",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 177,
            "description": "Dissable 3D mode in layer.",
            "itemtype": "property",
            "name": "DISSABLE",
            "type": "3DMode",
            "cat": "AfterEffects",
            "subcat": "3D",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 190,
            "description": "Add blending mode in layers.",
            "itemtype": "property",
            "name": "ADD",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 198,
            "description": "Alpha add blending mode in layers.",
            "itemtype": "property",
            "name": "ALPHA_ADD",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 206,
            "description": "Classic color burn blending mode in layers.",
            "itemtype": "property",
            "name": "CLASSIC_COLOR_BURN",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 214,
            "description": "Classic color dodge blending mode in layers.",
            "itemtype": "property",
            "name": "CLASSIC_COLOR_DODGE",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 222,
            "description": "Classic difference blending mode in layers.",
            "itemtype": "property",
            "name": "CLASSIC_DIFFERENCE",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 230,
            "description": "Color blending mode in layers.",
            "itemtype": "property",
            "name": "COLOR",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 238,
            "description": "Color burn blending mode in layers.",
            "itemtype": "property",
            "name": "COLOR_BURN",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 246,
            "description": "Color dodge blending mode in layers.",
            "itemtype": "property",
            "name": "COLOR_DODGE",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 254,
            "description": "Dancing dissolve blending mode in layers.",
            "itemtype": "property",
            "name": "DANCING_DISSOLVE",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 262,
            "description": "Darken blending mode in layers.",
            "itemtype": "property",
            "name": "DARKEN",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 270,
            "description": "Darker color blending mode in layers.",
            "itemtype": "property",
            "name": "DARKER_COLOR",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 278,
            "description": "Difference blending mode in layers.",
            "itemtype": "property",
            "name": "DIFFERENCE",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 286,
            "description": "Dissolve blending mode in layers.",
            "itemtype": "property",
            "name": "DISSOLVE",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 294,
            "description": "Divide blending mode in layers.",
            "itemtype": "property",
            "name": "DIVIDE",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 302,
            "description": "Exclusion blending mode in layers.",
            "itemtype": "property",
            "name": "EXCLUSION",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 310,
            "description": "Hard light blending mode in layers.",
            "itemtype": "property",
            "name": "HARD_LIGHT",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 318,
            "description": "Hard mix blending mode in layers.",
            "itemtype": "property",
            "name": "HARD_MIX",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 326,
            "description": "Hue blending mode in layers.",
            "itemtype": "property",
            "name": "HUE",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 334,
            "description": "Lighten blending mode in layers.",
            "itemtype": "property",
            "name": "LIGHTEN",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 342,
            "description": "Lighter color blending mode in layers.",
            "itemtype": "property",
            "name": "LIGHTER_COLOR",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 350,
            "description": "Linear burn blending mode in layers.",
            "itemtype": "property",
            "name": "LINEAR_BURN",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 358,
            "description": "Linear dodge blending mode in layers.",
            "itemtype": "property",
            "name": "LINEAR_DODGE",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 366,
            "description": "Linear light blending mode in layers.",
            "itemtype": "property",
            "name": "LINEAR_LIGHT",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 374,
            "description": "Luminescent premul blending mode in layers.",
            "itemtype": "property",
            "name": "LUMINESCENT_PREMUL",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 382,
            "description": "Luminosity blending mode in layers.",
            "itemtype": "property",
            "name": "LUMINOSITY",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 390,
            "description": "Multiply blending mode in layers.",
            "itemtype": "property",
            "name": "MULTIPLY",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 398,
            "description": "Normal blending mode in layers.",
            "itemtype": "property",
            "name": "NORMAL",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 406,
            "description": "Overlay blending mode in layers.",
            "itemtype": "property",
            "name": "OVERLAY",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 414,
            "description": "Pin light blending mode in layers.",
            "itemtype": "property",
            "name": "PIN_LIGHT",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 422,
            "description": "Saturation blending mode in layers.",
            "itemtype": "property",
            "name": "SATURATION",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 430,
            "description": "Screen blending mode in layers.",
            "itemtype": "property",
            "name": "SCREEN",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 438,
            "description": "Silhouete alpha blending mode in layers.",
            "itemtype": "property",
            "name": "SILHOUETE_ALPHA",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 446,
            "description": "Silhouette luma blending mode in layers.",
            "itemtype": "property",
            "name": "SILHOUETTE_LUMA",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 454,
            "description": "Subtract blending mode in layers.",
            "itemtype": "property",
            "name": "SUBTRACT",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 462,
            "description": "Soft light blending mode in layers.",
            "itemtype": "property",
            "name": "SOFT_LIGHT",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 470,
            "description": "Stencil alpha blending mode in layers.",
            "itemtype": "property",
            "name": "STENCIL_ALPHA",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 478,
            "description": "Stencil alpha blending mode in layers.",
            "itemtype": "property",
            "name": "STENCIL_LUMA",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 486,
            "description": "Vivid light blending mode in layers.",
            "itemtype": "property",
            "name": "VIVID_LIGHT",
            "type": "BlendMode",
            "cat": "AfterEffects",
            "subcat": "BlendModes",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 499,
            "description": "Alpha track matte.",
            "itemtype": "property",
            "name": "ALPHA",
            "type": "Track Matte Mode",
            "cat": "AfterEffects",
            "subcat": "TrackMatte",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 507,
            "description": "Alpha inverted track matte.",
            "itemtype": "property",
            "name": "ALPHA_INVERTED",
            "type": "Track Matte Mode",
            "cat": "AfterEffects",
            "subcat": "TrackMatte",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 515,
            "description": "Luma track matte.",
            "itemtype": "property",
            "name": "LUMA",
            "type": "Track Matte Mode",
            "cat": "AfterEffects",
            "subcat": "TrackMatte",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 523,
            "description": "Luma inverted track matte.",
            "itemtype": "property",
            "name": "LUMA_INVERTED",
            "type": "Track Matte Mode",
            "cat": "AfterEffects",
            "subcat": "TrackMatte",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 531,
            "description": "No track matte.",
            "itemtype": "property",
            "name": "NO_TRACK_MATTE",
            "type": "Track Matte Mode",
            "cat": "AfterEffects",
            "subcat": "TrackMatte",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 545,
            "description": "Parallel light type.",
            "itemtype": "property",
            "name": "PARALLEL",
            "type": "LightType",
            "cat": "AfterEffects",
            "subcat": "Lighting",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 553,
            "description": "Spot light type.",
            "itemtype": "property",
            "name": "SPOT",
            "type": "LightType",
            "cat": "AfterEffects",
            "subcat": "Lighting",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 561,
            "description": "Point light type.",
            "itemtype": "property",
            "name": "POINT",
            "type": "LightType",
            "cat": "AfterEffects",
            "subcat": "Lighting",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 569,
            "description": "Ambient light type.",
            "itemtype": "property",
            "name": "AMBIENT",
            "type": "LightType",
            "cat": "AfterEffects",
            "subcat": "Lighting",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 584,
            "description": "Mask mode none.",
            "itemtype": "property",
            "name": "M_NONE",
            "type": "MaskMode",
            "cat": "AfterEffects",
            "subcat": "Masks",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 592,
            "description": "Mask mode add.",
            "itemtype": "property",
            "name": "M_NONE",
            "type": "MaskMode",
            "cat": "AfterEffects",
            "subcat": "Masks",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 600,
            "description": "Mask mode subtract.",
            "itemtype": "property",
            "name": "M_NONE",
            "type": "MaskMode",
            "cat": "AfterEffects",
            "subcat": "Masks",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 608,
            "description": "Mask mode intersect.",
            "itemtype": "property",
            "name": "M_NONE",
            "type": "MaskMode",
            "cat": "AfterEffects",
            "subcat": "Masks",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 616,
            "description": "Mask mode lighten.",
            "itemtype": "property",
            "name": "M_NONE",
            "type": "MaskMode",
            "cat": "AfterEffects",
            "subcat": "Masks",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 624,
            "description": "Mask mode darken.",
            "itemtype": "property",
            "name": "M_NONE",
            "type": "MaskMode",
            "cat": "AfterEffects",
            "subcat": "Masks",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 632,
            "description": "Mask mode difference.",
            "itemtype": "property",
            "name": "M_NONE",
            "type": "MaskMode",
            "cat": "AfterEffects",
            "subcat": "Masks",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 644,
            "description": "Close, used for endShape() modes.",
            "itemtype": "property",
            "name": "CLOSE",
            "type": "String",
            "cat": "Document",
            "subcat": "Primitives",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 653,
            "description": "Draw mode for beginShape() and endShape().",
            "itemtype": "property",
            "name": "LINES",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 659,
            "description": "Draw mode for beginShape() and endShape().",
            "itemtype": "property",
            "name": "QUADS",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 665,
            "description": "Draw mode for beginShape() and endShape().",
            "itemtype": "property",
            "name": "TRIANGLES",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 672,
            "description": "Set layer to inactive but get the shape for animation.",
            "itemtype": "property",
            "name": "INACTIVE",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 681,
            "description": "Line cap butt option",
            "itemtype": "property",
            "name": "BUTT",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 687,
            "description": "Line cap round option",
            "itemtype": "property",
            "name": "ROUND",
            "class": "b"
        },
        {
            "file": "src\\after-effects-constants.js",
            "line": 694,
            "description": "Line cap projectin option",
            "itemtype": "property",
            "name": "PROJECTING",
            "class": "b"
        },
        {
            "file": "src\\after-effects-data.js",
            "line": 3,
            "description": "Add items to project from a folder using dialog box.",
            "cat": "AfterEffects",
            "subcat": "Data",
            "itemtype": "method",
            "name": "itemsFromFolderGUI",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the folder to create for items",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Last added items",
                "type": "ItemCollection"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-data.js",
            "line": 29,
            "description": "Add items to project from a full path.",
            "cat": "AfterEffects",
            "subcat": "Data",
            "itemtype": "method",
            "name": "itemsFromFolder",
            "params": [
                {
                    "name": "path",
                    "description": "Folder full path",
                    "type": "String"
                },
                {
                    "name": "name",
                    "description": "Name of the folder to create for items",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Last added items",
                "type": "ItemCollection"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-data.js",
            "line": 57,
            "description": "Add's item to composition",
            "cat": "AfterEffects",
            "subcat": "Data",
            "itemtype": "method",
            "name": "loadItem",
            "params": [
                {
                    "name": "path",
                    "description": "Item's path from data folder",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of the item",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the item",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z-coordinate of the item",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "startTime",
                    "description": "Layer's in point",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "outPoint",
                    "description": "Layer's out point",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity, audiolevels].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created layer reference.",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-data.js",
            "line": 156,
            "description": "Load image sequence to composition",
            "cat": "AfterEffects",
            "subcat": "Data",
            "itemtype": "method",
            "name": "loadSequence",
            "params": [
                {
                    "name": "path",
                    "description": "Sequence path to data folder",
                    "type": "String"
                },
                {
                    "name": "startTime",
                    "description": "Layer's start time",
                    "type": "Number"
                },
                {
                    "name": "outPoint",
                    "description": "Layer's out point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created layer reference.",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-data.js",
            "line": 252,
            "description": "Load Adobe Illustrator files as composition - retain layer sizes.",
            "cat": "AfterEffects",
            "subcat": "Data",
            "itemtype": "method",
            "name": "loadAI",
            "params": [
                {
                    "name": "path",
                    "description": "Path to file inside data folder",
                    "type": "String"
                },
                {
                    "name": "startTime",
                    "description": "Layer's start time",
                    "type": "Number"
                },
                {
                    "name": "outPoint",
                    "description": "Layer's out point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created layer reference.",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 6,
            "description": "Create new composition.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "createComp",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the composition",
                    "type": "String"
                },
                {
                    "name": "w",
                    "description": "Width of the composition",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the composition",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "Duration in seconds of the composition",
                    "type": "Number"
                },
                {
                    "name": "frameRate",
                    "description": "Frame rate of the composition",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Created composition",
                "type": "CompItem"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 25,
            "description": "Starts undo block.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "beginUndo",
            "params": [
                {
                    "name": "name",
                    "description": "Undo name GUI identifier",
                    "type": "String",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 42,
            "description": "Ends undo block",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "endUndo",
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 51,
            "description": "Get composition reference by name.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "getComp",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the composition to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Composition found",
                "type": "CompItem|null"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 74,
            "description": "Clean composition layers and items references.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "cleanComp",
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 96,
            "description": "Sets background color for the composition.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "background",
            "params": [
                {
                    "name": "color",
                    "description": "",
                    "type": "Color|Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 119,
            "description": "Get the total number of frames from composition.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "getTotalFrames",
            "return": {
                "description": "Total number of frames",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 129,
            "description": "Duration of the composition in seconds.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "getDuration",
            "return": {
                "description": "Total duration in seconds",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 139,
            "description": "Set composition to new duration.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "setCompDuration",
            "params": [
                {
                    "name": "duration",
                    "description": "Duration in seconds",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 149,
            "description": "Total number of layers in the composition",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "numLayers",
            "return": {
                "description": "Total number of layers",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 160,
            "description": "Return all the compositions in the project.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "getAllComps",
            "return": {
                "description": "0-based array with CompItem object for eacho one of all the compositions found in the project",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 180,
            "description": "Delete a composition.",
            "itemtype": "method",
            "name": "deleteComp",
            "params": [
                {
                    "name": "comp",
                    "description": "",
                    "type": "String|CompItem"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 199,
            "description": "Get the composition center",
            "itemtype": "method",
            "name": "getCenter",
            "return": {
                "description": "Composition's center as [x, y] array",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 212,
            "description": "Get item reference by name.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "getItem",
            "params": [
                {
                    "name": "name",
                    "description": "Name of item to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Item found",
                "type": "Item|null"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 235,
            "description": "Adds item to comp (for ease of use loadItem() is better suited for this task).",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "addItemToComp",
            "params": [
                {
                    "name": "item",
                    "description": "Item to add to composition",
                    "type": "Item"
                }
            ],
            "return": {
                "description": "Item added as layer",
                "type": "Layer"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 259,
            "description": "Get layer reference by name.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "getLayer",
            "params": [
                {
                    "name": "name",
                    "description": "Name of layer to retrieve",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Return Properties or if the layer has effects it returns a 0-based array of [Transform Properties, FX Properties];",
                "type": "Properties|Array"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 298,
            "description": "Get all layers as Properties object from composition.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "getAllLayers",
            "params": [
                {
                    "name": "option",
                    "description": "If option is true, return type is LayerCollection",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "0-based array of Properties object with attributes [layer, anchor, position, scale, rotation, orientation, rotationx, rotationy, rotationz, opacity].\n                            Each attribute is a Property object for convenience in animation, except of layer which is the layer reference.",
                "type": "Array<Properties>"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 327,
            "description": "Get layers by range.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "getLayers",
            "params": [
                {
                    "name": "min",
                    "description": "Minimum index of layer collection",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "Maximum index of layer collection",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Layers in range",
                "type": "LayerCollection"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 340,
            "description": "Gets a property from a specified layer, this function is useful in case Properties is not returning a correct layer or effects property.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "getProperty",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to get a Property from",
                    "type": "AVLayer"
                },
                {
                    "name": "path",
                    "description": "Full path to property",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Property reference",
                "type": "Property"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 359,
            "description": "Add FX to a specific layer.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "addFX",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to add fx to",
                    "type": "Properties"
                },
                {
                    "name": "fx",
                    "description": "Name of the effect to add to layer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Properties object with all animatable properties. Attribute names are built without spaces and all lower case. (Ej. \"fx.color\" To get the property \"Effects/Fill/Color\").",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 380,
            "description": "Add slider to layer",
            "itemtype": "method",
            "name": "slider",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to add slider to",
                    "type": "Properties"
                },
                {
                    "name": "name",
                    "description": "Slider new name",
                    "type": "String"
                },
                {
                    "name": "prop",
                    "description": "Property to link slider control",
                    "type": "Property"
                }
            ],
            "return": {
                "description": "Properties object with attributes [name, value]",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 403,
            "description": "Return true if seleted layer is Shape Layer",
            "itemtype": "method",
            "name": "isShape",
            "params": [
                {
                    "name": "layer",
                    "description": "",
                    "type": "Properties"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 420,
            "description": "Add preset to a specific layer",
            "itemtype": "method",
            "name": "addPreset",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to add preset to",
                    "type": "Properties"
                },
                {
                    "name": "name",
                    "description": "Name of the preset to add to layer",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Object hierarchy containing all properties of each effect. For every effect it returns an object with attributes names without spaces and lower case. (Ej. \"fx.fill.color\" To get the property \"Effects/Fill/Color\").",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 444,
            "itemtype": "method",
            "name": "getAllFXProperties",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to get FX properties",
                    "type": "Properties"
                }
            ],
            "return": {
                "description": "Object hierarchy containing all properties of each effect. For every effect it returns an object with attributes names without spaces and lower case. (Ej. \"fx.fill.color\" To get the property \"Effects/Fill/Color\").",
                "type": "Object"
            },
            "example": [
                " \n<div>\n<code>\nvar layer = b.solid();                   <br>\nvar fx = b.getAllFXProperties(layer);    <br>\nb.setKey(fx.fill.color, 0, [1,0,0]);     <br>\nb.setKey(fx.fill.color, 1, [1,1,0]);     <br>\n</code>\n</div>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 475,
            "description": "Sets track matte function in layer.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "trackMatte",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to set track matte",
                    "type": "Properties"
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "ALPHA|ALPHA_INVERTED|LUMA|LUMA_INVERTED|NO_TRACK_MATTE"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 488,
            "description": "Precompose layers.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "preComp",
            "params": [
                {
                    "name": "indexes",
                    "description": "The position indexes of the layers to be collected. An array of integers",
                    "type": "Array"
                },
                {
                    "name": "name",
                    "description": "Name of the new composition",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 501,
            "description": "Return the index number ;",
            "itemtype": "method",
            "name": "getIndex",
            "params": [
                {
                    "name": "layer",
                    "description": "",
                    "type": "Properties"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 512,
            "description": "Return only manually selected layers from composition.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "selectedLayers",
            "return": {
                "description": "0-based array of Properties object of only selected layers with attributes [layer, anchor, position, scale, rotation, orientation, rotationx, rotationy, rotationz, opacity].\n                            Each attribute is a Property object for convenience in animation, except of layer which is the layer reference.",
                "type": "Array<Properties>"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 544,
            "description": "Add item to composition",
            "itemtype": "method",
            "name": "addLayer",
            "params": [
                {
                    "name": "item",
                    "description": "",
                    "type": "Item"
                }
            ],
            "return": {
                "description": "Transform properties",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 558,
            "description": "Turn on collapse transformation on layer",
            "itemtype": "method",
            "name": "collapseVectors",
            "params": [
                {
                    "name": "layer",
                    "description": "",
                    "type": "Properties"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 570,
            "description": "Duplicate a layer n times.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "duplicate",
            "params": [
                {
                    "name": "layer",
                    "description": "Layer to duplicate",
                    "type": "Layer"
                },
                {
                    "name": "n",
                    "description": "Number of duplicates to generate",
                    "type": "Number"
                },
                {
                    "name": "autoComp",
                    "description": "Precompose all duplicates if true",
                    "type": "Boolean",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array with transform Properties",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 609,
            "description": "Reverse layers order in timeline.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "reverseLayers",
            "params": [
                {
                    "name": "layers",
                    "description": "Layers to invert order",
                    "type": "LayerCollection"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 641,
            "description": "Create parent - child relationship.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "parent",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to be parent layer",
                    "type": "Properties"
                },
                {
                    "name": "layer",
                    "description": "Object or AVLayer to be children",
                    "type": "Properties"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 656,
            "description": "Get Layer object bounds.",
            "itemtype": "method",
            "name": "bounds",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to bet bounds from",
                    "type": "Properties"
                }
            ],
            "return": {
                "description": "A JavaScript object with four attributes, [top, left, width, height]",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 669,
            "description": "Reposition anchor point to bounding box option: <br>\n1-------2-------3    <br>\n4-------5-------6    <br>\n7-------8-------9    <br>",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "anchor",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to reposition anchor point",
                    "type": "Properties"
                },
                {
                    "name": "option",
                    "description": "Point to bounding box to reposition anchor point",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 898,
            "description": "Enables motion blur to layer.",
            "itemtype": "method",
            "name": "motionBlur",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to enable motion blur",
                    "type": "Properties"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 913,
            "description": "Enable adjustment layer mode",
            "itemtype": "method",
            "name": "adjustmenLayer",
            "params": [
                {
                    "name": "layer",
                    "description": "Object or AVLayer to enable adjustment layer mode",
                    "type": "Properties"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 928,
            "description": "Convert audio to keyframes.",
            "itemtype": "method",
            "name": "audioToKeyframes",
            "params": [
                {
                    "name": "layer",
                    "description": "Layer to create keyframes from",
                    "type": "AVLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [left, right, both].",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 955,
            "description": "Apply time remap to loop a sequence",
            "itemtype": "method",
            "name": "timeRemap",
            "params": [
                {
                    "name": "layer",
                    "description": "",
                    "type": "Sequence"
                }
            ],
            "return": {
                "description": "1"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 975,
            "description": "Generate frame offset between layers layers",
            "cat": "AfterEffects",
            "subcat": "FromSelections",
            "itemtype": "method",
            "name": "moveFrames",
            "params": [
                {
                    "name": "n",
                    "description": "Number of frames to offset each layer layer beginning at playhead position",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 999,
            "description": "Create shapes from vectors layer.",
            "itemtype": "method",
            "name": "createShapes",
            "params": [
                {
                    "name": "layers",
                    "description": "Array of Properties object to convert to shapes",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity, fill, stroke, weight].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created Shape layer reference.",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1063,
            "description": "Set composition to work with.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "setComp",
            "params": [
                {
                    "name": "comp",
                    "description": "",
                    "type": "String|CompItem"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1081,
            "description": "Set anchor point to bounding box option mode: <br>\n1-------2-------3    <br>\n4-------5-------6    <br>\n7-------8-------9    <br> \nThis allows for the position to be controlled in a more intuitive way from scripting. Defaults to 5 which is the center of the layer.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "anchorMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1095,
            "description": "Set global blend mode for layers.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "blendMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "ADD|ALPHA_ADD|CLASSIC_COLOR_BURN|CLASSIC_COLOR_DODGE|CLASSIC_DIFFERENCE|COLOR|COLOR_BURN|COLOR_DODGE|DANCING_DISSOLVE|DARKEN|DARKER_COLOR|DIFFERENCE|DISSOLVE|DIVIDE|EXCLUSION|HARD_LIGHT|HARD_MIX|HUE|LIGHTEN|LIGHTER_COLOR|LINEAR_BURN|LINEAR_DODGE|LINEAR_LIGHT|LUMINESCENT_PREMUL|LUMINOSITY|MULTIPLY|NORMAL|OVERLAY|PIN_LIGHT|SATURATION|SCREEN|SILHOUETTE_LUMA|SUBTRACT|SOFT_LIGHT|STENCIL_ALPHA|STENCIL_LUMA|VIVID_LIGHT"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1105,
            "description": "Apply no fill.",
            "cat": "AfterEffects",
            "subcat": "Color",
            "itemtype": "method",
            "name": "noFill",
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1117,
            "description": "Apply no stroke.",
            "cat": "AfterEffects",
            "subcat": "Color",
            "itemtype": "method",
            "name": "noStroke",
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1129,
            "description": "Returns the current strokeWeight in points and sets it if argument strokeWeight is given.",
            "cat": "AfterEffects",
            "subcat": "Color",
            "itemtype": "method",
            "name": "strokeWeight",
            "params": [
                {
                    "name": "strokeWeight",
                    "description": "Stroke weight in points to set",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Current stroke weight",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1148,
            "description": "Enables 3D manipulation in layers.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "set3DMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "ENABLE3D|DISSABLE3D"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1158,
            "description": "Set specific layer blending mode.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "blendingMode",
            "params": [
                {
                    "name": "layer",
                    "description": "",
                    "type": "Layer"
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "BlendMode"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1169,
            "description": "Set global cap mode for stroke.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "capMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "BUTT|ROUND|PROJECTING"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1185,
            "description": "Add composition to render queue.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "addToRender",
            "params": [
                {
                    "name": "comp",
                    "description": "Reference to composition to render",
                    "type": "CompItem",
                    "optional": true
                },
                {
                    "name": "template",
                    "description": "Name of template to use on render",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "Path to save render file",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1219,
            "description": "Render all compositions in render queue.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "render",
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1229,
            "description": "Clear all items from render queue.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "clearRenderQueue",
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1251,
            "description": "Add composition to render queue.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "addToRenderAME",
            "params": [
                {
                    "name": "comp",
                    "description": "Reference to composition to render",
                    "type": "CompItem",
                    "optional": true
                },
                {
                    "name": "template",
                    "description": "Name of template to use on render",
                    "type": "String"
                },
                {
                    "name": "path",
                    "description": "Path to save render file",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1289,
            "description": "Render in render Adone Media Encoder.",
            "cat": "AfterEffects",
            "itemtype": "method",
            "name": "renderAME",
            "class": "b"
        },
        {
            "file": "src\\after-effects-environment.js",
            "line": 1307,
            "description": "Suspends the calling thread for a number of milliseconds.\nDuring a sleep period, checks at 100 millisecond intervals to see whether the sleep should be terminated.",
            "cat": "Environment",
            "itemtype": "method",
            "name": "delay",
            "params": [
                {
                    "name": "milliseconds",
                    "description": "The delay time in milliseconds",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-keyframes.js",
            "line": 3,
            "description": "Create keyframe at time and value.",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "itemtype": "method",
            "name": "key",
            "params": [
                {
                    "name": "prop",
                    "description": "Property reference",
                    "type": "Property"
                },
                {
                    "name": "time",
                    "description": "Time in seconds to set keyframe",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "value",
                    "description": "Number or array depending on the property dimensions to set value",
                    "type": "Number|Array"
                },
                {
                    "name": "inTangents",
                    "description": "When spatial keyframes set the value of in tangents",
                    "type": "Array",
                    "optional": true
                },
                {
                    "name": "outTangent",
                    "description": "When spatial keyframes set the value of out tangents",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "index of last created keyframe",
                "type": "Number"
            },
            "example": [
                "\nvar shape = b.rect(500, 500, 100, 100);      <br>\nb.key(shape.position, 0, [0,0]);             <br>\nb.key(shape.position, 2, [100, 100]);        <br>\nb.key(shape.rotation, 45);                   <br>\n                                             <br>\n<h4> Syntax: </h4>                           <br>\nb.key(prop, value)                           <br>\nb.key(prop, time, value)                     <br>\nb.key(prop, time, inTangents)                <br>\nb.key(prop, time, inTangents, outTangents)   <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-keyframes.js",
            "line": 81,
            "description": "Set global keyframe interpolation mode.",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "itemtype": "method",
            "name": "interpolationMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "BEZIER|LINEAR|HOLD"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-keyframes.js",
            "line": 92,
            "description": "Set global spatial keyframe inerpolation mode.",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "itemtype": "method",
            "name": "spatialMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "LINEAR|AUTO_BEZIER"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-keyframes.js",
            "line": 103,
            "description": "Creates ease object for keyrame velocity manipulation.",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "itemtype": "method",
            "name": "ease",
            "params": [
                {
                    "name": "speed",
                    "description": "The speed value of the keyframe. The units depend on the type of keyframe, and are displayed in the Keyframe Velocity dialog box",
                    "type": "Number"
                },
                {
                    "name": "influence",
                    "description": "Range[0.1..100.0] The influence value of the keyframe, as shown in the Keyframe Velocity dialog box",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "KeyFrameEase"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-keyframes.js",
            "line": 117,
            "description": "Manipulates keyframe property speed.",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "itemtype": "method",
            "name": "speedEase",
            "params": [
                {
                    "name": "prop",
                    "description": "Property reference",
                    "type": "Property"
                },
                {
                    "name": "index",
                    "description": "Keyframe index",
                    "type": "Number"
                },
                {
                    "name": "easeIn",
                    "description": "Ease in object to apply",
                    "type": "KeyframeEase"
                },
                {
                    "name": "easeOut",
                    "description": "Ease out object to apply",
                    "type": "KeyframeEase"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-keyframes.js",
            "line": 135,
            "description": "Manipulates keyframe property speed.",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "itemtype": "method",
            "name": "speed",
            "params": [
                {
                    "name": "prop",
                    "description": "Property reference",
                    "type": "Property"
                },
                {
                    "name": "index",
                    "description": "Keyframe index",
                    "type": "Number"
                },
                {
                    "name": "speed",
                    "description": "The speed value of the keyframe. The units depend on the type of keyframe, and are displayed in the Keyframe Velocity dialog box",
                    "type": "Number"
                },
                {
                    "name": "influence",
                    "description": "influence Range[0.1..100.0] The influence value of the keyframe, as shown in the Keyframe Velocity dialog box",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-keyframes.js",
            "line": 155,
            "description": "Set all keyframes of a property with the same speed and influence.",
            "cat": "AfterEffects",
            "subcat": "Keyframes",
            "itemtype": "method",
            "name": "speedAll",
            "params": [
                {
                    "name": "prop",
                    "description": "Property reference",
                    "type": "Property"
                },
                {
                    "name": "speed",
                    "description": "The speed value of the keyframe. The units depend on the type of keyframe, and are displayed in the Keyframe Velocity dialog box",
                    "type": "Number"
                },
                {
                    "name": "influence",
                    "description": "Range[0.1..100.0] The influence value of the keyframe, as shown in the Keyframe Velocity dialog box",
                    "type": "Number"
                }
            ],
            "example": [
                "\nvar shape = b.rect(500, 500, 100, 100);                                          <br>                                     \nb.key(shape.position, 0, [b.random(b.width), b.random(b.height)]);               <br>\nb.key(shape.position, 2, [b.random(b.width), b.random(b.height)]);               <br>\nb.key(shape.position, 3, [b.random(b.width), b.random(b.height)]);               <br>\nb.key(shape.position, 5, [b.random(b.width), b.random(b.height)]);               <br>\nb.speedAll(shape.position, 0.1, 90);                                             <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-keyframes.js",
            "line": 206,
            "description": "Print all attributes of a Javascript object.",
            "itemtype": "method",
            "name": "printProperties",
            "params": [
                {
                    "name": "props",
                    "description": "Object to print properties",
                    "type": "Object"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-keyframes.js",
            "line": 217,
            "description": "Add expression to property",
            "itemtype": "method",
            "name": "expression",
            "params": [
                {
                    "name": "prop",
                    "description": "Property to add expression to",
                    "type": "Property"
                },
                {
                    "name": "exppression",
                    "description": "Expression",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-keyframes.js",
            "line": 227,
            "description": "Remove all keyframes from a layer property.",
            "itemtype": "method",
            "name": "removeAllKeyframes",
            "params": [
                {
                    "name": "prop",
                    "description": "",
                    "type": "Property"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-lightsandcam.js",
            "line": 1,
            "description": "Creates camera layer.",
            "itemtype": "method",
            "name": "camera",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the camera",
                    "type": "String"
                },
                {
                    "name": "interest",
                    "description": "2-D array to set point of interest",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, pointofinterest, position, xposition, yposition, zposition, orientation, xrotation, yrotation, zrotation, zoom, depthoffield, focusdistance, aperture, blurlevel, irisshape, irisrotation, irisroundness, irisaspectratio, irisdiffractionfringe, highlightgain, highlightthreshold, highlightsaturation].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created Camera layer reference.",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-lightsandcam.js",
            "line": 51,
            "description": "Creates light layer.",
            "itemtype": "method",
            "name": "light",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the camera",
                    "type": "String"
                },
                {
                    "name": "interest",
                    "description": "2-D array to set point of interest",
                    "type": "Array"
                },
                {
                    "name": "type",
                    "description": "Light type",
                    "type": "PARALLEL|SPOT|POINT|AMBIENT"
                }
            ],
            "return": {
                "description": "Properties object with attributes (depending on type) [layer, pointofinterest, position, xposition, yposition, zposition, orientation, xrotation, yrotation, zrotation, type, intensity, color, coneangle, conefeather, falloff, radius, falloffdistance, castsshadows, shadowdarkness, shadowdiffusion].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created Light layer reference.",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-masks.js",
            "line": 3,
            "description": "Creates mask on layer",
            "cat": "AfterEffects",
            "subcat": "Masks",
            "itemtype": "method",
            "name": "mask",
            "params": [
                {
                    "name": "layer",
                    "description": "Layer to add mask to",
                    "type": "AVLayer"
                },
                {
                    "name": "verts",
                    "description": "Mask vertices [x, y] array",
                    "type": "Number[][]"
                },
                {
                    "name": "inTangents] In tangents [x, y",
                    "description": "array",
                    "type": "Number[][]",
                    "optional": true
                },
                {
                    "name": "outTangents] Out tangents [x, y",
                    "description": "array",
                    "type": "Number[][]",
                    "optional": true
                },
                {
                    "name": "closed",
                    "description": "Mask close property",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Created mask",
                "type": "Mask"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-masks.js",
            "line": 76,
            "description": "Set global mask mode.",
            "itemtype": "method",
            "name": "maskMode",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "M_NONE|M_ADD|M_SUBTRACT|M_INTERSECT|M_LIGHTEN|M_DARKEN|M_DIFFERENCE"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-masks.js",
            "line": 86,
            "description": "Set a particular mask to it mode.",
            "itemtype": "method",
            "name": "setMaskMode",
            "params": [
                {
                    "name": "mask",
                    "description": "",
                    "type": "MaskObject"
                },
                {
                    "name": "mode",
                    "description": "",
                    "type": "M_NONE|M_ADD|M_SUBTRACT|M_INTERSECT|M_LIGHTEN|M_DARKEN|M_DIFFERENCE"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-masks.js",
            "line": 97,
            "description": "Using the beginMask() and endMask() functions allow creating more complex forms. beginMask() begins recording vertices and tangents for a shape and endMask() stops recording. \nThe value of the kind parameter tells it which types of mask to create from the provided vertices, the parameters available for beginMask() are M_NONE|M_ADD|M_SUBTRACT|M_INTERSECT|M_LIGHTEN|M_DARKEN|M_DIFFERENCE. \nAfter calling the beginMask() function, a series of vertex(), itangent() or otangent() commands must follow. To stop drawing the shape, call endMask(). \nEach shape will be outlined with the current stroke color and filled with the fill color.",
            "itemtype": "method",
            "name": "beginMask",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "M_NONE|M_ADD|M_SUBTRACT|M_INTERSECT|M_LIGHTEN|M_DARKEN|M_DIFFERENCE"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-masks.js",
            "line": 110,
            "description": "The endMask() function is the companion to beginMask() and may only be called after beginMask(). \nWhen endMask() is called, all of mask data defined since the previous call to beginMask() is written into the mask buffer. \nThe layer which layer to apply mask to and the constant CLOSE as the value for the MODE parameter to close the mask (to connect the beginning and the end).",
            "itemtype": "method",
            "name": "endMask",
            "params": [
                {
                    "name": "layer",
                    "description": "",
                    "type": "Properties"
                },
                {
                    "name": "close",
                    "description": "",
                    "type": "NONE|CLOSE"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 3,
            "description": "Add a solid to the composition.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "solid",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the solid",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "x",
                    "description": "x-coordinate of the solid",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the solid",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of the solid",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "Width of the solid",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the solid",
                    "type": "Number"
                },
                {
                    "name": "duration",
                    "description": "Duration of the solid in seconds",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created solid AVLayer reference.\n\n<h4> Syntax: </h4>\nvar solid = b.solid();                               <br>\nvar solid = b.solid(name);                           <br>\nvar solid = b.solid(duration);                       <br>\nvar solid = b.solid(x, y, w, h);                     <br>\nvar solid = b.solid(name, x, y, w, h);               <br>\nvar solid = b.solid(x, y, w, h, duration);           <br>\nvar solid = b.solid(x, y, z, w, h);                  <br>\nvar solid = b.solid(name, x, y, z, w, h);            <br>\nvar solid = b.solid(x, y, z, w, h, duration);        <br>",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 122,
            "description": "Draws a rectangle to the composition.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "rect",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of the rectangle",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "Width of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the rectangle",
                    "type": "Number"
                },
                {
                    "name": "roundness",
                    "description": "Roundness value of the rectangle",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity, size, fill, stroke, weight, round].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created ShapeLayer reference.\n\n<h4> Syntax: </h4>\nvar rect = b.rect(x, y);                             <br>\nvar rect = b.rect(x, y, w, h);                       <br>\nvar rect = b.rect(x, y, w, h, roundness);            <br>\nvar rect = b.rect(x, y, z);                          <br>\nvar rect = b.rect(x, y, z, w, h);                    <br>\nvar rect = b.rect(x, y, z, w, h, roundness);         <br>",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 233,
            "description": "Draws an ellipse to the composition.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "ellipse",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the ellipse",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the ellipse",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of the ellipse",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "w",
                    "description": "Width of the ellipse",
                    "type": "Number"
                },
                {
                    "name": "h",
                    "description": "Height of the ellipse",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity, size, fill, stroke, weight].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created ShapeLayer reference.\n\n<h4> Syntax: </h4>\nvar ellipse = b.ellipse(x, y);                             <br>\nvar ellipse = b.ellipse(x, y, w, h);                       <br>\nvar ellipse = b.ellipse(x, y, z);                          <br>\nvar ellipse = b.ellipse(x, y, z, w, h);                    <br>",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 332,
            "description": "Draws an n-gon to the composition.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "polygon",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the polygon",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the polygon",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of the polygon",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "r",
                    "description": "Radius of the polygon",
                    "type": "Number"
                },
                {
                    "name": "n",
                    "description": "Number of sides",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "[layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity, points, radius, fill, stroke, weight].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created ShapeLayer reference.\n\n<h4> Syntax: </h4>\nvar polygon = b.polygon(x, y);                             <br>\nvar polygon = b.polygon(x, y, r, n);                       <br>\nvar polygon = b.ellipse(x, y, z);                          <br>",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 433,
            "description": "Draws a line to the composition (currently only 2D mode supported).",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "line",
            "params": [
                {
                    "name": "x1",
                    "description": "x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity, stroke, weight].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created ShapeLayer reference.",
                "type": "Properties"
            },
            "example": [
                "\nb.stroke(1);                                                            <br>\nvar line = b.line(0, 0, b.width, b.height);                             <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 506,
            "description": "Draws a shape to the composition.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "shape",
            "params": [
                {
                    "name": "vertices",
                    "description": "Shape vertices [x, y] array",
                    "type": "Number[][]"
                },
                {
                    "name": "inTangents] In tangents [x, y",
                    "description": "array",
                    "type": "Number[][]",
                    "optional": true
                },
                {
                    "name": "outTangents] Out tangents [x, y",
                    "description": "array",
                    "type": "Number[][]",
                    "optional": true
                },
                {
                    "name": "closed",
                    "description": "Open or closed shape",
                    "type": "Boolean"
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity, path, fill, stroke, weight].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created ShapeLayer reference.",
                "type": "Properties"
            },
            "example": [
                "\n\nb.background(0);\n  \nvar points = [];\nvar inTan = [];\nvar outTan = [];\n  \nfor (var i=0; i<20; i++) {\n   var x = b.random(b.width);\n   var y = b.random(b.height);\n   points.push([x,y]);\n   inTan.push([x-5, y-5]);\n   outTan.push([x+5, y+5]);\n}\n  \nb.stroke(1);\nvar mask = b.shape(points, inTan, outTan, false);\nb.printProperties(mask);"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 643,
            "description": "Creates a new null object.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "nullLayer",
            "params": [
                {
                    "name": "duration",
                    "description": "Duration in seconds of null object",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created ShapeLayer reference.\n\n<h4> Syntax: </h4>\nvar null = b.nullLayer();                </br>\nvar null = b.nullLayer(duration);        </br>",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 712,
            "description": "Using the beginShape() and endShape() functions allow creating more complex forms. beginShape() begins recording vertices for a shape and endShape() stops recording. \nThe value of the kind parameter tells it which types of shapes to create from the provided vertices. With no mode specified, the shape can be any irregular polygon. \nThe parameters available for beginShape() are LINES, TRIANGLES, QUADS. \nAfter calling the beginShape() function, a series of vertex(), itangent() or otangent() commands must follow. To stop drawing the shape, call endShape(). \nEach shape will be outlined with the current stroke color and filled with the fill color.",
            "itemtype": "method",
            "name": "beginShape",
            "params": [
                {
                    "name": "mode",
                    "description": "",
                    "type": "NONE|LINES|QUADS|TRIANGLES|INVISIBLE"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 733,
            "description": "The endShape() function is the companion to beginShape() and may only be called after beginShape(). \nWhen endshape() is called, all of image data defined since the previous call to beginShape() is written into the image buffer. \nThe constant CLOSE as the value for the MODE parameter to close the shape (to connect the beginning and the end).",
            "itemtype": "method",
            "name": "endShape",
            "params": [
                {
                    "name": "close",
                    "description": "",
                    "type": "NONE|CLOSE"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 793,
            "description": "All shapes are constructed by connecting a series of vertices. vertex() is used to specify the vertex coordinates for lines, triangles, quads, and polygons. \nIt is used exclusively within the beginShape() and endShape() functions.",
            "itemtype": "method",
            "name": "vertex",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the vertex",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 804,
            "description": "Define in tangents for shape. Transformation space is relative to the vertex() defined.",
            "itemtype": "method",
            "name": "itangent",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the vertex",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 814,
            "description": "Define out tangents for shape. Transformation space is relative to the vertex() defined.",
            "itemtype": "method",
            "name": "otangent",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate of the vertex",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the vertex",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 965,
            "description": "Return individual properties of the last shape drawn with beginShape() and endShape().",
            "itemtype": "method",
            "name": "lastShape",
            "return": {
                "description": "Array of Properties for individual shapes;",
                "type": "Properties"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 1059,
            "description": "Add Pucker & Bloat effect to ShapeLayer.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "shapePuckerBloat",
            "params": [
                {
                    "name": "shape",
                    "description": "ShapeLayer or Properties object to add effect to",
                    "type": "ShapeLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [amount].",
                "type": "Properties"
            },
            "example": [
                "\nvar shape = b.rect(b.width / 2, b.height / 2, 400, 400);         <br>\nvar fx = b.shapePuckerBloat(shape.layer);                        <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 1085,
            "description": "Add Repeater effects to ShapeLayer.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "shapeRepeater",
            "params": [
                {
                    "name": "shape",
                    "description": "ShapeLayer or Properties object to add effect to",
                    "type": "ShapeLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [copies, offset, composite, anchor, position, scale, rotation, startopacity, endopacity].",
                "type": "Properties"
            },
            "example": [
                "\nvar shape = b.rect(b.width / 2, b.height / 2, 400, 400);         <br>\nvar fx = b.shapeRepeater(shape.layer);                           <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 1118,
            "description": "Add Trim Paths effect to ShapeLayer.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "shapeTrimPaths",
            "params": [
                {
                    "name": "shape",
                    "description": "ShapeLayer or Properties object to add effect to",
                    "type": "ShapeLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [start, end, offset].",
                "type": "Properties"
            },
            "example": [
                "\nvar shape = b.rect(b.width / 2, b.height / 2, 400, 400);         <br>\nvar fx = b.shapeTrimPaths(shape.layer);                          <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 1146,
            "description": "Add Twist effect to ShapeLayer.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "shapeTwist",
            "params": [
                {
                    "name": "shape",
                    "description": "ShapeLayer or Properties object to add effect to",
                    "type": "ShapeLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [angle, center].",
                "type": "Properties"
            },
            "example": [
                "\nvar shape = b.rect(b.width / 2, b.height / 2, 400, 400);         <br>\nvar fx = b.shapeTwist(shape.layer);                              <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 1173,
            "description": "Add Wiggle Path effect to ShapeLayer.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "shapeWigglePaths",
            "params": [
                {
                    "name": "shape",
                    "description": "ShapeLayer or Properties object to add effect to",
                    "type": "ShapeLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [size, detail, points, wiggles, correlation, temporalphase, spatialphase, seed].",
                "type": "Properties"
            },
            "example": [
                "\nvar shape = b.rect(b.width / 2, b.height / 2, 400, 400);         <br>\nvar fx = b.shapeWigglePaths(shape.layer);                        <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 1207,
            "description": "Add Wiggle Transform effect to ShapeLayer.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "shapeWiggleTransform",
            "params": [
                {
                    "name": "shape",
                    "description": "ShapeLayer or Properties object to add effect to",
                    "type": "ShapeLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [wiggles, correlation, temporalphase, spatialphase, seed, anchor, position, scale, rotation].",
                "type": "Properties"
            },
            "example": [
                "\nvar shape = b.rect(b.width / 2, b.height / 2, 400, 400);         <br>\nvar fx = b.shapeWiggleTransform(shape.layer);                    <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-shapes.js",
            "line": 1242,
            "description": "Add Zig Zag effect to ShapeLayer.",
            "cat": "AfterEffects",
            "subcat": "Shapes",
            "itemtype": "method",
            "name": "shapeZigZag",
            "params": [
                {
                    "name": "shape",
                    "description": "ShapeLayer or Properties object to add effect to",
                    "type": "ShapeLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [size, ridges, points].",
                "type": "Properties"
            },
            "example": [
                "\nvar shape = b.rect(b.width / 2, b.height / 2, 400, 400);         <br>\nvar fx = b.shapeZigZag(shape.layer);                             <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 3,
            "description": "Add text to composition.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "text",
            "params": [
                {
                    "name": "text",
                    "description": "Text to add",
                    "type": "String"
                },
                {
                    "name": "x",
                    "description": "x-coordinate of the textbox",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate of the textbox",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "z-coordinate of the textbox",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Properties object with attributes [layer, anchorpoint, position, xposition, yposition, zposition, scale, orientation, xrotation, yrotation, zrotation, rotation, opacity, path, reversepath, perpendiculartopath, forcealignment, firstmargin, lastmargin].\n                     Each attribute is a Property object for convenience in animation, except of layer which is the new created TextLayer reference.",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(text, x, y);\nvar txt = b.text(text, x, y, z);"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 90,
            "description": "Sets the current text alignment.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textAlign",
            "params": [
                {
                    "name": "mode",
                    "description": "Text justification mode",
                    "type": "J_LEFT|J_RIGHT|J_CENTER|J_FULL_LEFT|J_FULL_RIGHT|J_FULL_CENTER|J_FULL"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 101,
            "description": "Returns the current font size in points and sets it if argument pointSize is given.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textSize",
            "params": [
                {
                    "name": "pointSize",
                    "description": "The size in points to set",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The current point size",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 116,
            "description": "Returns the current font and sets it if argument fontName is given.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textFont",
            "params": [
                {
                    "name": "fontName",
                    "description": "The name of the font to set e.g. Helvetica",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The name of the current font",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 184,
            "description": "Add Anchor Point effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textAnchorPoint",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [anchor, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textAnchorPoint(txt.layer);                                <br>                         "
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 209,
            "description": "Add Position effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textPosition",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [position, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textPosition(txt.layer);                                   <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 233,
            "description": "Add Scale effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textScale",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [scale, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textScale(txt.layer);                                      <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 257,
            "description": "Add Skew effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textSkew",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [skew, skewAxis, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textSkew(txt.layer);                                       <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 282,
            "description": "Add Rotation effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textRotation",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [rotation, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textRotation(txt.layer);                                   <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 307,
            "description": "Add Opacity effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textOpacity",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [opacity].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textOpacity(txt.layer);                                    <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 332,
            "description": "Add All Transform Properties effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textAllTransform",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [anchor, position, scale, skew, skewAxis, rotation, opacity, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textAllTransform(txt.layer);                               <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 363,
            "description": "Add Fill Color effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textFill",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [fill, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textFill(txt.layer);                                       <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 388,
            "description": "Add Stroke Color effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textStroke",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [stroke, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textStroke(txt.layer);                                     <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 413,
            "description": "Add Stroke Width effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textStrokeWidth",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [width, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textStrokeWidth(txt.layer);                                <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 438,
            "description": "Add Tracking effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textStroke",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [tracking, amount, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textTracking(txt.layer);                                   <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 464,
            "description": "Add Character Offset effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textCharacterOffset",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [alignment, range, offset, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textCharacterOffset(txt.layer);                            <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 491,
            "description": "Add Character Value effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textCharacterValue",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [alignment, range, value, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textCharacterValue(txt.layer);                             <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-text.js",
            "line": 518,
            "description": "Add Blur effect to text layer.",
            "cat": "AfterEffects",
            "subcat": "Text",
            "itemtype": "method",
            "name": "textBlur",
            "params": [
                {
                    "name": "text",
                    "description": "TextLayer or Properties object to add effect to",
                    "type": "TextLayer"
                }
            ],
            "return": {
                "description": "Properties object with attributes [blur, start, end, offset, units, basedon, mode, amount, shape, smoothness, easehigh, easelow, randomizeorder, randomseed].",
                "type": "Properties"
            },
            "example": [
                "\nvar txt = b.text(\"Baffects.js\", b.width / 2, b.height / 2);           <br>\nvar fx = b.textBlur(txt.layer);                                       <br>"
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-transformation.js",
            "line": 43,
            "description": "Pushes the current transformation matrix onto the matrix stack. Understanding pushMatrix() and popMatrix() requires understanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate system to the stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations.",
            "cat": "AfterEffects",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "pushMatrix",
            "class": "b"
        },
        {
            "file": "src\\after-effects-transformation.js",
            "line": 58,
            "description": "Pops the current transformation matrix off the matrix stack. Understanding pushing and popping requires understanding the concept of a matrix stack. The pushMatrix() function saves the current coordinate system to the stack and popMatrix() restores the prior coordinate system. pushMatrix() and popMatrix() are used in conjuction with the other transformation methods and may be embedded to control the scope of the transformations.",
            "cat": "AfterEffects",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "popMatrix",
            "class": "b"
        },
        {
            "file": "src\\after-effects-transformation.js",
            "line": 73,
            "description": "Replaces the current matrix with the identity matrix.",
            "cat": "AfterEffects",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "resetMatrix",
            "class": "b"
        },
        {
            "file": "src\\after-effects-transformation.js",
            "line": 85,
            "description": "Specifies an amount to displace objects within the page. The x parameter specifies left/right translation, the y parameter specifies up/down translation. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling translate(50, 0) and then translate(20, 0) is the same as translate(70, 0). This function can be further controlled by the pushMatrix() and popMatrix().",
            "cat": "AfterEffects",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "translate",
            "params": [
                {
                    "name": "tx",
                    "description": "The amount of offset on the X axis.",
                    "type": "Number"
                },
                {
                    "name": "ty",
                    "description": "The amount of offset on the Y axis.",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-transformation.js",
            "line": 103,
            "description": "Increasing and decreasing the size of an object by expanding and contracting vertices. Scale values are specified as decimal percentages. The function call scale(2.0) increases the dimension of a shape by 200%. Objects always scale from their relative origin to the coordinate system. Transformations apply to everything that happens after and subsequent calls to the function multiply the effect. For example, calling scale(2.0) and then scale(1.5) is the same as scale(3.0). If scale() is called within draw(), the transformation is reset when the loop begins again. This function can be further controlled by pushMatrix() and popMatrix().\nIf only one parameter is given, it is applied on X and Y axis.",
            "cat": "AfterEffects",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "scale",
            "params": [
                {
                    "name": "scaleX",
                    "description": "The amount to scale the X axis.",
                    "type": "Number"
                },
                {
                    "name": "scaleY",
                    "description": "The amount to scale the Y axis.",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\after-effects-transformation.js",
            "line": 124,
            "description": "Rotates an object the amount specified by the angle parameter. Angles should be specified in degrees (values from 0 to 360). \nObjects are always rotated around their relative position to the origin and positive numbers rotate objects in a clockwise direction with 0 degrees being up and HALF_PI being to the right etc. Transformations apply to everything that happens after and subsequent calls to the function accumulates the effect. For example, calling rotate(PI/2) and then rotate(PI/2) is the same as rotate(PI). If rotate() is called within the draw(), the transformation is reset when the loop begins again. Technically, rotate() multiplies the current transformation matrix by a rotation matrix. This function can be further controlled by the pushMatrix() and popMatrix().",
            "cat": "AfterEffects",
            "subcat": "Transformation",
            "itemtype": "method",
            "name": "rotate",
            "params": [
                {
                    "name": "angle",
                    "description": "The angle specified in radians",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\core.js",
            "line": 15,
            "description": "Run the sketch to adopt processing language familiarities",
            "itemtype": "method",
            "name": "go",
            "params": [
                {
                    "name": "name",
                    "description": "Name of the composition",
                    "type": "String",
                    "optional": true
                },
                {
                    "name": "width",
                    "description": "Width of the composition",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "height",
                    "description": "Height of the composition",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "duration",
                    "description": "Duration of the composition in seconds",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "frameRate",
                    "description": "Frame rate of the composition",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 5,
            "description": "Function parses and validates a string as JSON-object. Usage:\nvar obj = b.JSON.decode(str);\nvar str = b.JSON.encode(obj);",
            "cat": "Data",
            "subcat": "JSON",
            "itemtype": "method",
            "name": "JSON.decode",
            "params": [
                {
                    "name": "String",
                    "description": "to be parsed as JSON-object.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns JSON-object or throws an error if invalid JSON has been provided.",
                "type": "Object"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 35,
            "description": "Function convert an javascript object to a JSON-string. Usage:\nvar str = b.JSON.encode(obj);\nvar obj = b.JSON.decode(str);",
            "cat": "Data",
            "subcat": "JSON",
            "itemtype": "method",
            "name": "JSON.encode",
            "params": [
                {
                    "name": "Object",
                    "description": "to be converted to a JSON-string",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Returns JSON-string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 87,
            "description": "Sets the delimiter of the CSV decode and encode function.",
            "cat": "Data",
            "subcat": "CSV",
            "itemtype": "method",
            "name": "CSV.delimiter",
            "params": [
                {
                    "name": "delimiter",
                    "description": "Optional Sets the delimiter for CSV parsing",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Returns the current delimiter if called without argument",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 105,
            "description": "Function parses a string as CSV-object Array. Usage:\nvar arr = b.CSV.decode(str);\nvar str = b.CSV.encode(arr);",
            "cat": "Data",
            "subcat": "CSV",
            "itemtype": "method",
            "name": "CSV.decode",
            "params": [
                {
                    "name": "String",
                    "description": "to be parsed as CSV-object.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns CSV-object Array",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 130,
            "description": "Function convert an javascript array of objects to a CSV-string. Usage:\nvar str = b.CSV.encode(arr);\nvar arr = b.CSV.decode(str);",
            "cat": "Data",
            "subcat": "CSV",
            "itemtype": "method",
            "name": "CSV.encode",
            "params": [
                {
                    "name": "Array",
                    "description": "to be converted to a CSV-string",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "Returns CSV-string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 232,
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 234,
            "description": "Converts a byte, char, int, or color to a String containing the\nequivalent binary notation. For example color(0, 102, 153, 255)\nwill convert to the String \"11111111000000000110011010011001\". This\nfunction can help make your geeky debugging sessions much happier.",
            "cat": "Data",
            "subcat": "Conversion",
            "itemtype": "method",
            "name": "binary",
            "params": [
                {
                    "name": "num",
                    "description": "value to convert",
                    "type": "Number"
                },
                {
                    "name": "numBits",
                    "description": "number of digits to return",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "A formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 264,
            "description": "Converts a String representation of a binary number to its\nequivalent integer value. For example, unbinary(\"00001000\") will\nreturn 8.",
            "cat": "Data",
            "subcat": "Conversion",
            "itemtype": "method",
            "name": "unbinary",
            "params": [
                {
                    "name": "binaryString",
                    "description": "value to convert",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The integer representation",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 299,
            "description": "Convert a number to a hex representation.",
            "cat": "Data",
            "subcat": "Conversion",
            "itemtype": "method",
            "name": "hex",
            "params": [
                {
                    "name": "value",
                    "description": "The number to convert",
                    "type": "Number"
                },
                {
                    "name": "len",
                    "description": "The length of the hex number to be created, default: 8",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The hex representation as a string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 320,
            "description": "Convert a hex representation to a number.",
            "cat": "Data",
            "subcat": "Conversion",
            "itemtype": "method",
            "name": "unhex",
            "params": [
                {
                    "name": "hex",
                    "description": "The hex representation",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The number",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 343,
            "description": "Removes multiple, leading or trailing spaces and punctuation from \"words\". E.g. converts \"word!\" to \"word\". Especially useful together with b.words();",
            "itemtype": "method",
            "name": "trimWord",
            "cat": "Data",
            "subcat": "String Functions",
            "params": [
                {
                    "name": "s",
                    "description": "The String to trim",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 361,
            "description": "Combines an array of Strings into one String, each separated by\nthe character(s) used for the separator parameter. To join arrays\nof ints or floats, it's necessary to first convert them to strings\nusing nf() or nfs().",
            "itemtype": "method",
            "name": "join",
            "cat": "Data",
            "subcat": "String Functions",
            "params": [
                {
                    "name": "array",
                    "description": "A string array",
                    "type": "Array"
                },
                {
                    "name": "separator",
                    "description": "The separator to be inserted",
                    "type": "String"
                }
            ],
            "return": {
                "description": "The joined string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 379,
            "description": "The split() function breaks a string into pieces using a\ncharacter or string as the divider. The delim parameter specifies the\ncharacter or characters that mark the boundaries between each piece. A\nString[] array is returned that contains each of the pieces.\n\nIf the result is a set of numbers, you can convert the String[] array\nto to a float[] or int[] array using the datatype conversion functions\nint() and float() (see example above).\n\nThe splitTokens() function works in a similar fashion, except that it\nsplits using a range of characters instead of a specific character or\nsequence.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "split",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "delim",
                    "description": "The string used to separate the data",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of strings",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 405,
            "description": "The splitTokens() function splits a String at one or many character\n\"tokens.\" The tokens parameter specifies the character or characters\nto be used as a boundary.\n\nIf no tokens character is specified, any whitespace character is used\nto split. Whitespace characters include tab (\\t), line feed (\\n),\ncarriage return (\\r), form feed (\\f), and space. To convert a String\nto an array of integers or floats, use the datatype conversion functions\nint() and float() to convert the array of Strings.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "splitTokens",
            "params": [
                {
                    "name": "str",
                    "description": "the String to be split",
                    "type": "String"
                },
                {
                    "name": "tokens",
                    "description": "list of individual characters that will be used as separators",
                    "type": "String",
                    "optional": true
                }
            ],
            "return": {
                "description": "Array of strings",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 506,
            "description": "Utility function for formatting numbers into strings. There\nare two versions, one for formatting floats and one for formatting\nints. The values for the digits, left, and right parameters should\nalways be positive integers.\n\nAs shown in the above example, nf() is used to add zeros to the\nleft and/or right of a number. This is typically for aligning a list\nof numbers. To remove digits from a floating-point number, use the\nint(), ceil(), floor(), or round() functions.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "nf",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 530,
            "description": "Utility function for formatting numbers into strings. Similar to nf()\nbut leaves a blank space in front of positive numbers so they align\nwith negative numbers in spite of the minus symbol. There are two\nversions, one for formatting floats and one for formatting ints. The\nvalues for the digits, left, and right parameters should always be\npositive integers.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "nfs",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 551,
            "description": "Utility function for formatting numbers into strings. Similar to nf()\nbut puts a \"+\" in front of positive numbers and a \"-\" in front of\nnegative numbers. There are two versions, one for formatting floats\nand one for formatting ints. The values for the digits, left, and right\nparameters should always be positive integers.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "nfp",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 571,
            "description": "Utility function for formatting numbers into strings and placing\nappropriate commas to mark units of 1000. There are two versions, one\nfor formatting ints and one for formatting an array of ints. The value\nfor the digits parameter should always be a positive integer.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "nfc",
            "params": [
                {
                    "name": "value",
                    "description": "The Number to convert",
                    "type": "Number"
                },
                {
                    "name": "leftDigits",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "rightDigits",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The formatted string",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 591,
            "description": "Removes whitespace characters from the beginning and end of a String.\nIn addition to standard whitespace characters such as space, carriage\nreturn, and tab, this function also removes the Unicode \"nbsp\" character.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "trim",
            "params": [
                {
                    "name": "str",
                    "description": "A string or an array of strings to be trimmed",
                    "type": "String|Array"
                }
            ],
            "return": {
                "description": "Returns the input in a trimmed way",
                "type": "String|Array"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 612,
            "description": "Checks whether an URL string is valid.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "isURL",
            "params": [
                {
                    "name": "url",
                    "description": "An url string to be checked",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns either true or false",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 626,
            "description": "Checks whether a string ends with a specific character or string.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "endsWith",
            "params": [
                {
                    "name": "str",
                    "description": "A string to be checked",
                    "type": "String"
                },
                {
                    "name": "suffix",
                    "description": "The string to look for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns either true or false",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 640,
            "description": "Checks whether a string starts with a specific character or string.",
            "cat": "Data",
            "subcat": "String Functions",
            "itemtype": "method",
            "name": "startsWith",
            "params": [
                {
                    "name": "str",
                    "description": "A string to be checked",
                    "type": "String"
                },
                {
                    "name": "prefix",
                    "description": "The string to look for",
                    "type": "String"
                }
            ],
            "return": {
                "description": "Returns either true or false",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 655,
            "description": "Checks whether a var is an Array, returns true if this is the case",
            "cat": "Data",
            "subcat": "Type-Check",
            "itemtype": "method",
            "name": "isArray",
            "params": [
                {
                    "name": "obj",
                    "description": "The object to check",
                    "type": "Object|String|Number|Boolean"
                }
            ],
            "return": {
                "description": "returns true if this is the case",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 668,
            "description": "Checks whether a var is a number, returns true if this is the case",
            "cat": "Data",
            "subcat": "Type-Check",
            "itemtype": "method",
            "name": "isNumber",
            "params": [
                {
                    "name": "num",
                    "description": "The number to check",
                    "type": "Object|String|Number|Boolean"
                }
            ],
            "return": {
                "description": "returns true if this is the case",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 681,
            "description": "Checks whether a var is a string, returns true if this is the case",
            "cat": "Data",
            "subcat": "Type-Check",
            "itemtype": "method",
            "name": "isString",
            "params": [
                {
                    "name": "str",
                    "description": "The string to check",
                    "type": "Object|String|Number|Boolean"
                }
            ],
            "return": {
                "description": "returns true if this is the case",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 749,
            "description": "Get the folder of the active document as a Folder object. Use .absoluteURI to access a string representation of the folder path.",
            "cat": "Document",
            "subcat": "Misc",
            "itemtype": "method",
            "name": "projectFolder",
            "return": {
                "description": "The folder of the the active document",
                "type": "Folder"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 768,
            "description": "Reads the contents of a file or loads an URL into a String.\nIf the file is specified by name as String, it must be located in the document's data directory.",
            "cat": "Data",
            "subcat": "Input",
            "itemtype": "method",
            "name": "loadString",
            "params": [
                {
                    "name": "fileOrString",
                    "description": "The text file name in the document's data directory or a File instance or an URL",
                    "type": "String|File"
                }
            ],
            "return": {
                "description": "String file or URL content.",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 803,
            "description": "Reads the contents of a file or loads an URL and creates a String array of its individual lines.\nIf the file is specified by name as String, it must be located in the document's data directory.",
            "cat": "Data",
            "subcat": "Input",
            "itemtype": "method",
            "name": "loadStrings",
            "params": [
                {
                    "name": "file",
                    "description": "The text file name in the document's data directory or a File instance or an URL",
                    "type": "String|File"
                }
            ],
            "return": {
                "description": "Array of the individual lines in the given File or URL",
                "type": "String[]"
            },
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 833,
            "description": "Prints a message line to the console output in the ExtendScript editor.",
            "cat": "Output",
            "itemtype": "method",
            "name": "println",
            "params": [
                {
                    "name": "msg",
                    "description": "The message to print",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 844,
            "description": "Prints a message to the console output in the ExtendScript editor, but unlike b.println() it doesn't return the carriage to a new line at the end.",
            "cat": "Output",
            "itemtype": "method",
            "name": "print",
            "params": [
                {
                    "name": "msg",
                    "description": "The message to print",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 855,
            "description": "Print numerous information about the current environment to the console",
            "cat": "Output",
            "itemtype": "method",
            "name": "printInfo",
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 873,
            "description": "Writes an array of strings to a file, one line per string.\nIf the given file exists it gets overridden.",
            "cat": "Output",
            "itemtype": "method",
            "name": "saveStrings",
            "params": [
                {
                    "name": "file",
                    "description": "The file name or a File instance",
                    "type": "String|File"
                },
                {
                    "name": "strings",
                    "description": "The string array to be written",
                    "type": "String[]"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\data.js",
            "line": 891,
            "description": "Writes a string to a file.\nIf the given file exists it gets overridden.",
            "cat": "Output",
            "itemtype": "method",
            "name": "saveString",
            "params": [
                {
                    "name": "file",
                    "description": "The file name or a File instance",
                    "type": "String|File"
                },
                {
                    "name": "string",
                    "description": "The string to be written",
                    "type": "String"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\environment.js",
            "line": 7,
            "description": "The year() function returns the current year as an integer (2012, 2013 etc).",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "year",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\environment.js",
            "line": 19,
            "description": "The month() function returns the current month as a value from 1 - 12.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "month",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\environment.js",
            "line": 31,
            "description": "The day() function returns the current day as a value from 1 - 31.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "day",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\environment.js",
            "line": 43,
            "description": "The weekday() function returns the current weekday as a string from Sunday, Monday, Tuesday...",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "weekday",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\environment.js",
            "line": 56,
            "description": "The hour() function returns the current hour as a value from 0 - 23.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "hour",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\environment.js",
            "line": 68,
            "description": "The minute() function returns the current minute as a value from 0 - 59.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "minute",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\environment.js",
            "line": 80,
            "description": "The second() function returns the current second as a value from 0 - 59.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "second",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\environment.js",
            "line": 92,
            "description": "Returns the number of milliseconds (thousandths of a second) since starting an applet.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "millis",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\environment.js",
            "line": 104,
            "description": "The millisecond() function differs from millis(), in that it returns the exact millisecond (thousandths of a second) of the current time.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "millisecond",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\environment.js",
            "line": 116,
            "description": "The timestamp() function returns the current date formatted as YYYYMMDD_HHMMSS for useful unique filenaming.",
            "cat": "Environment",
            "subcat": "Date",
            "itemtype": "method",
            "name": "timestamp",
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 56,
            "description": "Used to run a function on all elements of an array.",
            "cat": "Data",
            "subcat": "Array Functions",
            "itemtype": "method",
            "name": "forEach",
            "params": [
                {
                    "name": "collection",
                    "description": "The array to be processed.",
                    "type": "Array"
                },
                {
                    "name": "cb",
                    "description": "The function that will be called on each element. The call will be like function(item,i) where i is the current index of the item within the array.",
                    "type": "Function"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 83,
            "description": "HashList is a data container that allows you to store information as key -> value pairs. As usual in JavaScript mixed types of keys and values are accepted in one HashList instance.",
            "is_constructor": 1,
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList",
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 109,
            "description": "This removes a key -> value pair by its key.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.remove",
            "params": [
                {
                    "name": "key",
                    "description": "The key to delete",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The value before deletion",
                "type": "Any"
            },
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 129,
            "description": "This gets a value by its key.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.get",
            "params": [
                {
                    "name": "key",
                    "description": "The key to look for",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The value",
                "type": "Any"
            },
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 142,
            "description": "This sets a key -> value pair. If a key is already existing, the value will be updated. Please note that Functions are currently not supported as values.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.set",
            "params": [
                {
                    "name": "key",
                    "description": "The key to use",
                    "type": "Any"
                },
                {
                    "name": "value",
                    "description": "The value to set",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "The value after setting",
                "type": "Any"
            },
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 165,
            "description": "Checks for the existence of a given key.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.hasKey",
            "params": [
                {
                    "name": "key",
                    "description": "The key to check",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 179,
            "description": "Checks if a certain value exists at least once in all of the key -> value pairs.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.hasValue",
            "params": [
                {
                    "name": "value",
                    "description": "",
                    "type": "Any"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 200,
            "description": "Returns an array of all keys that are sorted by their values from highest to lowest. Please note that this only works if you have conistently used Numbers for values.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.getKeysByValues",
            "return": {
                "description": "An array with all the keys",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 218,
            "description": "Returns an array with all keys in a sorted order from higher to lower magnitude.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.getSortedKeys",
            "return": {
                "description": "An array with all the keys",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 230,
            "description": "Returns an array with all keys.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.getKeys",
            "return": {
                "description": "An array with all the keys",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 249,
            "description": "Returns an array with all keys.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.getKeys",
            "return": {
                "description": "An array with all the keys",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "src\\global-functions.js",
            "line": 269,
            "description": "Deletes all the key -> value pairs in this HashList.",
            "cat": "Data",
            "subcat": "HashList",
            "itemtype": "method",
            "name": "HashList.clear",
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 7,
            "description": "A class to describe a two or three dimensional vector. This datatype stores two or three variables that are commonly used as a position, velocity, and/or acceleration. Technically, position is a point and velocity and acceleration are vectors, but this is often simplified to consider all three as vectors. For example, if you consider a rectangle moving across the screen, at any given instant it has a position (the object's location, expressed as a point.), a velocity (the rate at which the object's position changes per time unit, expressed as a vector), and acceleration (the rate at which the object's velocity changes per time unit, expressed as a vector). Since vectors represent groupings of values, we cannot simply use traditional addition/multiplication/etc. Instead, we'll need to do some \"vector\" math, which is made easy by the methods inside the Vector class.\n\nConstructor of Vector, can be two- or three-dimensional.",
            "is_constructor": 1,
            "cat": "Data",
            "subcat": "Vector",
            "itemtype": "method",
            "name": "Vector",
            "params": [
                {
                    "name": "x",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "z",
                    "description": "",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 25,
            "description": "Static function. Calculates the Euclidean distance between two points (considering a point as a vector object).\nIs meant to be called \"static\" i.e. Vector.dist(v1, v2);",
            "cat": "Data",
            "subcat": "Vector",
            "itemtype": "method",
            "name": "Vector.dist",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 40,
            "description": "Static function. Calculates the dot product of two vectors.\nIs meant to be called \"static\" i.e. Vector.dot(v1, v2);",
            "itemtype": "method",
            "name": "Vector.dot",
            "cat": "Data",
            "subcat": "Vector",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The dot product",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 55,
            "description": "Static function. Calculates the cross product of two vectors.\nIs meant to be called \"static\" i.e. Vector.cross(v1, v2);",
            "itemtype": "method",
            "name": "Vector.cross",
            "cat": "Data",
            "subcat": "Vector",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The cross product",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 70,
            "description": "Static function. Calculates the angle between two vectors.\nIs meant to be called \"static\" i.e. Vector.angleBetween(v1, v2);",
            "itemtype": "method",
            "name": "Vector.angleBetween",
            "cat": "Data",
            "subcat": "Vector",
            "static": 1,
            "params": [
                {
                    "name": "v1",
                    "description": "The first vector",
                    "type": "Vector"
                },
                {
                    "name": "v2",
                    "description": "The second vector",
                    "type": "Vector"
                }
            ],
            "return": {
                "description": "The angle",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 87,
            "description": "Sets the x, y, and z component of the vector using three separate variables, the data from a Vector, or the values from a float array.",
            "itemtype": "method",
            "name": "Vector.set",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a vector, array or x component",
                    "type": "Number|Array|Vector"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 104,
            "description": "Gets a copy of the vector, returns a Vector object.",
            "itemtype": "method",
            "name": "Vector.get",
            "cat": "Data",
            "subcat": "Vector",
            "return": {
                "description": "A copy of the vector",
                "type": "Vector"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 114,
            "description": "Calculates the magnitude (length) of the vector and returns the result as a float",
            "itemtype": "method",
            "name": "Vector.mag",
            "cat": "Data",
            "subcat": "Vector",
            "return": {
                "description": "The length",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 127,
            "description": "Adds x, y, and z components to a vector, adds one vector to another.",
            "itemtype": "method",
            "name": "Vector.add",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 147,
            "description": "Substract x, y, and z components or a full vector from this vector",
            "itemtype": "method",
            "name": "Vector.sub",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 167,
            "description": "Multiplies this vector with x, y, and z components or another vector.",
            "itemtype": "method",
            "name": "Vector.mult",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 187,
            "description": "Divides this vector through x, y, and z components or another vector.",
            "itemtype": "method",
            "name": "Vector.div",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 207,
            "description": "Calculates the distance from this vector to another as x, y, and z components or full vector.",
            "itemtype": "method",
            "name": "Vector.dist",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 223,
            "description": "Calculates the dot product from this vector to another as x, y, and z components or full vector.",
            "itemtype": "method",
            "name": "Vector.dot",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The dot product",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 237,
            "description": "Calculates the cross product from this vector to another as x, y, and z components or full vector.",
            "itemtype": "method",
            "name": "Vector.cross",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "v",
                    "description": "Either a full vector or an x component",
                    "type": "Vector|Number"
                },
                {
                    "name": "y",
                    "description": "The y component",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "The z component",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "The cross product",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 253,
            "description": "Normalizes the length of this vector to 1.",
            "cat": "Data",
            "subcat": "Vector",
            "itemtype": "method",
            "name": "Vector.normalize",
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 263,
            "description": "Normalizes the length of this vector to the given parameter.",
            "itemtype": "method",
            "name": "Vector.limit",
            "cat": "Data",
            "subcat": "Vector",
            "params": [
                {
                    "name": "high",
                    "description": "The value to scale to.",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 276,
            "description": "The 2D orientation (heading) of this vector in radian.",
            "itemtype": "method",
            "name": "Vector.heading",
            "cat": "Data",
            "subcat": "Vector",
            "return": {
                "description": "A radian angle value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 286,
            "description": "Returns data about this vector as a string.",
            "itemtype": "method",
            "name": "Vector.toString",
            "cat": "Data",
            "subcat": "Vector",
            "return": {
                "description": "The x, y and z components as a string.",
                "type": "String"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 296,
            "description": "Returns this vector as an array [x,y,z].",
            "itemtype": "method",
            "name": "Vector.array",
            "cat": "Data",
            "subcat": "Vector",
            "return": {
                "description": "[x,y,z]",
                "type": "Array"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 322,
            "description": "Calculates the absolute value (magnitude) of a number. The absolute value of a number is always positive.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "abs",
            "params": [
                {
                    "name": "val",
                    "description": "An arbitrary number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The absolute value of that number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 333,
            "description": "Calculates the closest int value that is greater than or equal to the value of the parameter. For example, ceil(9.03) returns the value 10.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "ceil",
            "params": [
                {
                    "name": "val",
                    "description": "An arbitrary number",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The next highest integer value"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 344,
            "description": "Constrains a value to not exceed a maximum and minimum value.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "constrain",
            "params": [
                {
                    "name": "aNumber",
                    "description": "the value to constrain",
                    "type": "Number"
                },
                {
                    "name": "aMin",
                    "description": "minimum limit",
                    "type": "Number"
                },
                {
                    "name": "aMax",
                    "description": "maximum limit",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The constrained value"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 362,
            "description": "Calculates the distance between two points.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "dist",
            "params": [
                {
                    "name": "x1",
                    "description": "the x-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "y1",
                    "description": "the y-coordinate of the first point",
                    "type": "Number"
                },
                {
                    "name": "x2",
                    "description": "the x-coordinate of the second point",
                    "type": "Number"
                },
                {
                    "name": "y2",
                    "description": "the y-coordinate of the second point",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The distance",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 385,
            "description": "Returns Euler's number e (2.71828...) raised to the power of the value parameter.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "exp",
            "params": [
                {
                    "name": "a",
                    "description": "value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 396,
            "description": "Calculates the closest int value that is less than or equal to the value of the parameter.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "floor",
            "params": [
                {
                    "name": "a",
                    "description": "value",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 407,
            "description": "Calculates a number between two numbers at a specific increment. The amt parameter is the amount to interpolate between the two values where 0.0 equal to the first point, 0.1 is very near the first point, 0.5 is half-way in between, etc. The lerp function is convenient for creating motion along a straight path and for drawing dotted lines.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "lerp",
            "params": [
                {
                    "name": "value1",
                    "description": "first value",
                    "type": "Number"
                },
                {
                    "name": "value2",
                    "description": "second value",
                    "type": "Number"
                },
                {
                    "name": "amt",
                    "description": "between 0.0 and 1.0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The mapped value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 423,
            "description": "Calculates the natural logarithm (the base-e logarithm) of a number. This function expects the values greater than 0.0.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "number",
                    "description": "must be greater then 0.0",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 434,
            "description": "Calculates the magnitude (or length) of a vector. A vector is a direction in space commonly used in computer graphics and linear algebra. Because it has no \"start\" position, the magnitude of a vector can be thought of as the distance from coordinate (0,0) to its (x,y) value. Therefore, mag() is a shortcut for writing \"dist(0, 0, x, y)\".",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "mag",
            "params": [
                {
                    "name": "a",
                    "description": "x-coordinate",
                    "type": "Number"
                },
                {
                    "name": "b",
                    "description": "y-coordinate",
                    "type": "Number"
                },
                {
                    "name": "c",
                    "description": "z-coordinate",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "the magnitude",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 451,
            "description": "Re-maps a number from one range to another. In the example above, the number '25' is converted from a value in the range 0..100 into a value that ranges from the left edge (0) to the right edge (width) of the screen.\n\nNumbers outside the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "map",
            "params": [
                {
                    "name": "value",
                    "description": "the value to be mapped",
                    "type": "Number"
                },
                {
                    "name": "istart",
                    "description": "start of the input range",
                    "type": "Number"
                },
                {
                    "name": "istop",
                    "description": "end of the input range",
                    "type": "Number"
                },
                {
                    "name": "ostart",
                    "description": "start of the output range",
                    "type": "Number"
                },
                {
                    "name": "ostop",
                    "description": "end of the output range",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the mapped value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 471,
            "description": "Determines the largest value in a sequence of numbers.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "max",
            "params": [
                {
                    "name": "param1",
                    "description": "Either the first value or an array of Numbers",
                    "type": "Number|Array"
                },
                {
                    "name": "param2",
                    "description": "Another value to be compared",
                    "type": "Number"
                },
                {
                    "name": "param3",
                    "description": "Another value to be compared",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The highest value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 492,
            "description": "Determines the smallest value in a sequence of numbers.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "min",
            "params": [
                {
                    "name": "param1",
                    "description": "Either the first value or an array of Numbers",
                    "type": "Number|Array"
                },
                {
                    "name": "param2",
                    "description": "Another value to be compared",
                    "type": "Number"
                },
                {
                    "name": "param3",
                    "description": "Another value to be compared",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The lowest value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 513,
            "description": "Normalizes a number from another range into a value between 0 and 1. \n\nIdentical to map(value, low, high, 0, 1); \n\nNumbers outside the range are not clamped to 0 and 1, because out-of-range values are often intentional and useful.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "norm",
            "params": [
                {
                    "name": "aNumber",
                    "description": "The value to be normed",
                    "type": "Number"
                },
                {
                    "name": "low",
                    "description": "The lowest value to be expected",
                    "type": "Number"
                },
                {
                    "name": "low",
                    "description": "The highest value to be expected",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The normalized value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 533,
            "description": "Facilitates exponential expressions. The pow() function is an efficient way of multiplying numbers by themselves (or their reciprocal) in large quantities. For example, pow(3, 5) is equivalent to the expression 3*3*3*3*3 and pow(3, -5) is equivalent to 1 / 3*3*3*3*3",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "pow",
            "params": [
                {
                    "name": "num",
                    "description": "base of the exponential expression",
                    "type": "Number"
                },
                {
                    "name": "exponent",
                    "description": "power of which to raise the base",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the result",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 545,
            "description": "Calculates the integer closest to the value parameter. For example, round(9.2) returns the value 9.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "round",
            "params": [
                {
                    "name": "value",
                    "description": "The value to be rounded",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The rounded value",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 556,
            "description": "Squares a number (multiplies a number by itself). The result is always a positive number, as multiplying two negative numbers always yields a positive result. For example, -1 * -1 = 1.",
            "cat": "Math",
            "subcat": "Calculation",
            "itemtype": "method",
            "name": "sq",
            "params": [
                {
                    "name": "aNumber",
                    "description": "The value to be squared",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 572,
            "description": "Calculates the square root of a number. The square root of a number is always positive, even though there may be a valid negative root. The square root s of number a is such that s*s = a. It is the opposite of squaring.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "sqrt",
            "params": [
                {
                    "name": "val",
                    "description": "The value to be calculated",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 583,
            "description": "The inverse of cos(), returns the arc cosine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927).",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "acos",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc cosine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 594,
            "description": "The inverse of sin(), returns the arc sine of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927).",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "asin",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc sine is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 605,
            "description": "The inverse of tan(), returns the arc tangent of a value. This function expects the values in the range of -1 to 1 and values are returned in the range 0 to PI (3.1415927).",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "atan",
            "params": [
                {
                    "name": "value",
                    "description": "the value whose arc tangent is to be returned",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 616,
            "description": "Calculates the angle (in radians) from a specified point to the coordinate origin as measured from the positive x-axis. Values are returned as a float in the range from PI to -PI. The atan2() function is most often used for orienting geometry to the position of the cursor. Note: The y-coordinate of the point is the first parameter and the x-coordinate is the second due the the structure of calculating the tangent.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "atan2",
            "params": [
                {
                    "name": "y",
                    "description": "the y coordinate",
                    "type": "Number"
                },
                {
                    "name": "x",
                    "description": "the x coordinate",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 628,
            "description": "Calculates the cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from 0 to PI*2). Values are returned in the range -1 to 1.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "cos",
            "params": [
                {
                    "name": "rad",
                    "description": "a value in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 639,
            "description": "Converts a radian measurement to its corresponding value in degrees. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. All trigonometric methods in Processing require their parameters to be specified in radians.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "degrees",
            "params": [
                {
                    "name": "aAngle",
                    "description": "an angle in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The given angle in degree",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 652,
            "description": "Converts a degree measurement to its corresponding value in radians. Radians and degrees are two ways of measuring the same thing. There are 360 degrees in a circle and 2*PI radians in a circle. For example, 90° = PI/2 = 1.5707964. All trigonometric methods in Processing require their parameters to be specified in radians.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "radians",
            "params": [
                {
                    "name": "aAngle",
                    "description": "an angle in degree",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "The given angle in radians",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 665,
            "description": "Calculates the sine of an angle. This function expects the values of the angle parameter to be provided in radians (values from 0 to 6.28). Values are returned in the range -1 to 1.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "sin",
            "params": [
                {
                    "name": "rad",
                    "description": "a value in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math.js",
            "line": 676,
            "description": "Calculates the ratio of the sine and cosine of an angle. This function expects the values of the angle parameter to be provided in radians (values from 0 to PI*2). Values are returned in the range infinity to -infinity.",
            "cat": "Math",
            "subcat": "Trigonometry",
            "itemtype": "method",
            "name": "tan",
            "params": [
                {
                    "name": "rad",
                    "description": "a value in radians",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math_random_noise.js",
            "line": 39,
            "description": "Sets the seed value for random()",
            "itemtype": "method",
            "name": "randomSeed",
            "params": [
                {
                    "name": "seed",
                    "description": "the seed value",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\math_random_noise.js",
            "line": 50,
            "description": "Return a random floating-point number.",
            "itemtype": "method",
            "name": "random",
            "params": [
                {
                    "name": "min",
                    "description": "the lower bound (inclusive)",
                    "type": "Number"
                },
                {
                    "name": "max",
                    "description": "the upper bound (exclusive)",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the random number",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math_random_noise.js",
            "line": 84,
            "description": "Returns a random number fitting a Gaussian, or\nnormal, distribution. There is theoretically no minimum or maximum\nvalue that randomGaussian() might return. Rather, there is\njust a very low probability that values far from the mean will be\nreturned; and a higher probability that numbers near the mean will\nbe returned.",
            "itemtype": "method",
            "name": "randomGaussian",
            "params": [
                {
                    "name": "mean",
                    "description": "the mean",
                    "type": "Number"
                },
                {
                    "name": "sd",
                    "description": "the standard deviation",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "the random number",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math_random_noise.js",
            "line": 146,
            "description": "Returns the Perlin noise value at specified coordinates. Perlin noise is\na random sequence generator producing a more natural ordered, harmonic\nsuccession of numbers compared to the standard <b>random()</b> function.\nIt was invented by Ken Perlin in the 1980s and been used since in\ngraphical applications to produce procedural textures, natural motion,\nshapes, terrains etc.<br /><br /> The main difference to the\n<b>random()</b> function is that Perlin noise is defined in an infinite\nn-dimensional space where each pair of coordinates corresponds to a\nfixed semi-random value (fixed only for the lifespan of the program; see\nthe noiseSeed() function). p5.js can compute 1D, 2D and 3D noise,\ndepending on the number of coordinates given. The resulting value will\nalways be between 0.0 and 1.0. The noise value can be animated by moving\nthrough the noise space as demonstrated in the example above. The 2nd\nand 3rd dimension can also be interpreted as time.<br /><br />The actual\nnoise is structured similar to an audio signal, in respect to the\nfunction's use of frequencies. Similar to the concept of harmonics in\nphysics, perlin noise is computed over several octaves which are added\ntogether for the final result. <br /><br />Another way to adjust the\ncharacter of the resulting sequence is the scale of the input\ncoordinates. As the function works within an infinite space the value of\nthe coordinates doesn't matter as such, only the distance between\nsuccessive coordinates does (eg. when using <b>noise()</b> within a\nloop). As a general rule the smaller the difference between coordinates,\nthe smoother the resulting noise sequence will be. Steps of 0.005-0.03\nwork best for most applications, but this will differ depending on use.",
            "itemtype": "method",
            "name": "noise",
            "params": [
                {
                    "name": "x",
                    "description": "x-coordinate in noise space",
                    "type": "Number"
                },
                {
                    "name": "y",
                    "description": "y-coordinate in noise space",
                    "type": "Number",
                    "optional": true
                },
                {
                    "name": "z",
                    "description": "z-coordinate in noise space",
                    "type": "Number",
                    "optional": true
                }
            ],
            "return": {
                "description": "Perlin noise value (between 0 and 1) at specified\n                     coordinates",
                "type": "Number"
            },
            "class": "b"
        },
        {
            "file": "src\\math_random_noise.js",
            "line": 259,
            "description": "Adjusts the character and level of detail produced by the Perlin noise\n function. Similar to harmonics in physics, noise is computed over\n several octaves. Lower octaves contribute more to the output signal and\n as such define the overall intensity of the noise, whereas higher octaves\n create finer grained details in the noise sequence.\n <br><br>\n By default, noise is computed over 4 octaves with each octave contributing\n exactly half than its predecessor, starting at 50% strength for the 1st\n octave. This falloff amount can be changed by adding an additional function\n parameter. Eg. a falloff factor of 0.75 means each octave will now have\n 75% impact (25% less) of the previous lower octave. Any value between\n 0.0 and 1.0 is valid, however note that values greater than 0.5 might\n result in greater than 1.0 values returned by <b>noise()</b>.\n <br><br>\n By changing these parameters, the signal created by the <b>noise()</b>\n function can be adapted to fit very specific needs and characteristics.",
            "itemtype": "method",
            "name": "noiseDetail",
            "params": [
                {
                    "name": "lod",
                    "description": "number of octaves to be used by the noise",
                    "type": "Number"
                },
                {
                    "name": "falloff",
                    "description": "falloff factor for each octave",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\math_random_noise.js",
            "line": 291,
            "description": "Sets the seed value for <b>noise()</b>. By default, <b>noise()</b>\nproduces different results each time the program is run. Set the\n<b>value</b> parameter to a constant to return the same pseudo-random\nnumbers each time the software is run.",
            "itemtype": "method",
            "name": "noiseSeed",
            "params": [
                {
                    "name": "seed",
                    "description": "the seed value",
                    "type": "Number"
                }
            ],
            "class": "b"
        },
        {
            "file": "src\\public-vars.js",
            "line": 4,
            "description": "System variable which stores the width of the current composition.",
            "itemtype": "property",
            "name": "width",
            "type": "Number",
            "cat": "Environment",
            "class": "b"
        },
        {
            "file": "src\\public-vars.js",
            "line": 11,
            "description": "System variable which stores the height of the current composition.",
            "itemtype": "property",
            "name": "height",
            "type": "Number",
            "cat": "Environment",
            "class": "b"
        },
        {
            "file": "src\\public-vars.js",
            "line": 19,
            "description": "Frame number which is currently being processed.",
            "itemtype": "property",
            "name": "frameCount",
            "type": "Number",
            "cat": "AfterEffects",
            "class": "b"
        },
        {
            "file": "src\\public-vars.js",
            "line": 26,
            "description": "Time in seconds of the frame which is currently being processed.",
            "itemtype": "property",
            "name": "frameTime",
            "type": "Number",
            "cat": "AfterEffects",
            "class": "b"
        }
    ],
    "warnings": [
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-color.js:3"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-color.js:3"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-color.js:58"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-color.js:58"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-color.js:98"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-color.js:98"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-color.js:136"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-color.js:136"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:1"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:8"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:8"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:16"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:16"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:24"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:24"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:32"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:32"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:40"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:40"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:48"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:48"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:56"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:56"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:70"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:70"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:78"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:78"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:86"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:86"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:94"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:94"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:102"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:102"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:110"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:110"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:118"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:118"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:131"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:131"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:139"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:139"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:147"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:147"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:156"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:156"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:169"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:169"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:177"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:177"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:190"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:190"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:198"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:198"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:206"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:206"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:214"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:214"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:222"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:222"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:230"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:230"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:238"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:238"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:246"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:246"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:254"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:254"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:262"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:262"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:270"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:270"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:278"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:278"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:286"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:286"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:294"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:294"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:302"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:302"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:310"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:310"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:318"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:318"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:326"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:326"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:334"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:334"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:342"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:342"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:350"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:350"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:358"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:358"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:366"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:366"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:374"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:374"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:382"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:382"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:390"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:390"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:398"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:398"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:406"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:406"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:414"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:414"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:422"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:422"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:430"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:430"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:438"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:438"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:446"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:446"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:454"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:454"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:462"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:462"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:470"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:470"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:478"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:478"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:486"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:486"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:499"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:499"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:507"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:507"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:515"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:515"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:523"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:523"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:531"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:531"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:545"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:545"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:553"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:553"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:561"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:561"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:569"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:569"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:584"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:584"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:592"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:592"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:600"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:600"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:608"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:608"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:616"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:616"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:624"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:624"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:632"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:632"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-constants.js:644"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-constants.js:644"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-data.js:3"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-data.js:3"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-data.js:29"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-data.js:29"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-data.js:57"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-data.js:57"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-data.js:156"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-data.js:156"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-data.js:252"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-data.js:252"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:6"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:25"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:42"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:51"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:74"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:96"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:119"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:129"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:139"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:149"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:160"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\after-effects-environment.js:199"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:212"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:235"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:259"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:298"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:327"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:340"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:359"
        },
        {
            "message": "replacing incorrect tag: returns with return",
            "line": " src\\after-effects-environment.js:420"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:475"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:488"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:512"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:570"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:609"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:641"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:669"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:975"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-environment.js:975"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1063"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1081"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1095"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1105"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-environment.js:1105"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1117"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-environment.js:1117"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1129"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-environment.js:1129"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1148"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1158"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1169"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1185"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1219"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1229"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1251"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1289"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-environment.js:1307"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-keyframes.js:3"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-keyframes.js:3"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-keyframes.js:81"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-keyframes.js:81"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-keyframes.js:92"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-keyframes.js:92"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-keyframes.js:103"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-keyframes.js:103"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-keyframes.js:117"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-keyframes.js:117"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-keyframes.js:135"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-keyframes.js:135"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-keyframes.js:155"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-keyframes.js:155"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-masks.js:3"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-masks.js:3"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:3"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:3"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:122"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:122"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:233"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:233"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:332"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:332"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:433"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:433"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:506"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:506"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:643"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:643"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:1059"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:1059"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:1085"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:1085"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:1118"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:1118"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:1146"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:1146"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:1173"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:1173"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:1207"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:1207"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-shapes.js:1242"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-shapes.js:1242"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:3"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:3"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:90"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:90"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:101"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:101"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:116"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:116"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:184"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:184"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:209"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:209"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:233"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:233"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:257"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:257"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:282"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:282"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:307"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:307"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:332"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:332"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:363"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:363"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:388"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:388"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:413"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:413"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:438"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:438"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:464"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:464"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:491"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:491"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-text.js:518"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-text.js:518"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-transformation.js:43"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-transformation.js:43"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-transformation.js:58"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-transformation.js:58"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-transformation.js:73"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-transformation.js:73"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-transformation.js:85"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-transformation.js:85"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-transformation.js:103"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-transformation.js:103"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\after-effects-transformation.js:124"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\after-effects-transformation.js:124"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:5"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:5"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:35"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:35"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:87"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:87"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:105"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:105"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:130"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:130"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:234"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:234"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:264"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:264"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:299"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:299"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:320"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:320"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:343"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:343"
        },
        {
            "message": "param name/type/descript missing",
            "line": " src\\data.js:343"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:361"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:361"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:379"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:379"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:405"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:405"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:506"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:506"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:530"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:530"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:551"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:551"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:571"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:571"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:591"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:591"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:612"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:612"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:626"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:626"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:640"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:640"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:655"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:655"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:668"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:668"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:681"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:681"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:749"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:749"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:768"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:768"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:803"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\data.js:803"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:833"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:844"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:855"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:873"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\data.js:891"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\environment.js:7"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\environment.js:7"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\environment.js:19"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\environment.js:19"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\environment.js:31"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\environment.js:31"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\environment.js:43"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\environment.js:43"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\environment.js:56"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\environment.js:56"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\environment.js:68"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\environment.js:68"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\environment.js:80"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\environment.js:80"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\environment.js:92"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\environment.js:92"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\environment.js:104"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\environment.js:104"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\environment.js:116"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\environment.js:116"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:56"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:56"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:83"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:83"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:109"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:109"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:129"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:129"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:142"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:142"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:165"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:165"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:179"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:179"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:200"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:200"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:218"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:218"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:230"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:230"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:249"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:249"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\global-functions.js:269"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\global-functions.js:269"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:7"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:7"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:25"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:25"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:40"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:40"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:55"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:55"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:70"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:70"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:87"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:87"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:104"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:104"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:114"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:114"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:127"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:127"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:147"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:147"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:167"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:167"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:187"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:187"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:207"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:207"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:223"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:223"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:237"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:237"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:253"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:253"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:263"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:263"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:276"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:276"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:286"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:286"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:296"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:296"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:322"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:322"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:333"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:333"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:344"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:344"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:362"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:362"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:385"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:385"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:396"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:396"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:407"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:407"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:423"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:423"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:434"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:434"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:451"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:451"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:471"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:471"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:492"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:492"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:513"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:513"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:533"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:533"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:545"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:545"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:556"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:556"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:572"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:572"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:583"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:583"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:594"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:594"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:605"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:605"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:616"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:616"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:628"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:628"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:639"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:639"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:652"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:652"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:665"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:665"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\math.js:676"
        },
        {
            "message": "unknown tag: subcat",
            "line": " src\\math.js:676"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\public-vars.js:4"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\public-vars.js:11"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\public-vars.js:19"
        },
        {
            "message": "unknown tag: cat",
            "line": " src\\public-vars.js:26"
        },
        {
            "message": "Missing item type",
            "line": " src\\data.js:232"
        }
    ]
}